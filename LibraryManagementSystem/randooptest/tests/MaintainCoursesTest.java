package tests;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class MaintainCoursesTest {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test001");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass2 = courseList1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test002");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test003");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass4 = courseList3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test004");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass6 = courseList5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test005");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass17 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test006");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass7 = courseList6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test007");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass6 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test008");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass3 = courseList2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test009");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        course.Course[] courseArray4 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList5 = new java.util.ArrayList<course.Course>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList5, courseArray4);
        maintainCourses3.courses = courseList5;
        maintainCourses0.courses = courseList5;
        java.lang.Class<?> wildcardClass9 = courseList5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test010");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.lang.Class<?> wildcardClass7 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test011");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass4 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test012");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.lang.String str7 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test013");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses0.courses = courseList7;
        java.lang.Class<?> wildcardClass10 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test014");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        maintainCourses0.path = "";
        java.lang.String str8 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test015");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass7 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test016");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        java.lang.Class<?> wildcardClass34 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test017");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        java.lang.String str15 = maintainCourses11.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        course.Course[] courseArray17 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList18 = new java.util.ArrayList<course.Course>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList18, courseArray17);
        maintainCourses16.courses = courseList18;
        maintainCourses11.courses = courseList18;
        maintainCourses0.courses = courseList18;
        java.lang.Class<?> wildcardClass23 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test018");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass6 = courseList5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test019");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass35 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test020");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.lang.Class<?> wildcardClass16 = courseList14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test021");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        java.lang.Class<?> wildcardClass12 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test022");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.String str6 = maintainCourses0.path;
        java.lang.String str7 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass8 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test023");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses23.courses;
        maintainCourses17.courses = courseList26;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses17.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        java.lang.String str51 = maintainCourses47.path;
        maintaining.MaintainCourses maintainCourses52 = new maintaining.MaintainCourses();
        course.Course[] courseArray53 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList54 = new java.util.ArrayList<course.Course>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList54, courseArray53);
        maintainCourses52.courses = courseList54;
        maintainCourses47.courses = courseList54;
        maintainCourses36.courses = courseList54;
        maintainCourses17.courses = courseList54;
        maintainCourses0.courses = courseList54;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test024");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList13 = maintainCourses12.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses12.courses;
        maintainCourses11.courses = courseList14;
        java.lang.String str16 = maintainCourses11.path;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses11.courses;
        maintainCourses0.courses = courseList17;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList33 = maintainCourses30.courses;
        java.lang.String str34 = maintainCourses30.path;
        maintaining.MaintainCourses maintainCourses35 = new maintaining.MaintainCourses();
        course.Course[] courseArray36 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList37 = new java.util.ArrayList<course.Course>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList37, courseArray36);
        maintainCourses35.courses = courseList37;
        maintainCourses30.courses = courseList37;
        maintainCourses19.courses = courseList37;
        maintainCourses0.courses = courseList37;
        java.lang.Class<?> wildcardClass43 = courseList37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test025");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "";
        java.lang.String str17 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test026");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        course.Course[] courseArray11 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList12 = new java.util.ArrayList<course.Course>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList12, courseArray11);
        maintainCourses10.courses = courseList12;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintainCourses15.path = "";
        java.util.ArrayList<course.Course> courseList18 = maintainCourses15.courses;
        maintainCourses10.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses22 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList23 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses22.courses;
        maintainCourses21.courses = courseList24;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses21.courses;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses21.courses = courseList34;
        java.lang.String str36 = maintainCourses21.path;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses21.courses;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        maintaining.MaintainCourses maintainCourses44 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList45 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList47 = maintainCourses44.courses;
        maintainCourses38.courses = courseList47;
        maintaining.MaintainCourses maintainCourses49 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses50 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList51 = maintainCourses50.courses;
        java.util.ArrayList<course.Course> courseList52 = maintainCourses50.courses;
        maintainCourses49.courses = courseList52;
        java.lang.String str54 = maintainCourses49.path;
        java.util.ArrayList<course.Course> courseList55 = maintainCourses49.courses;
        maintainCourses38.courses = courseList55;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintaining.MaintainCourses maintainCourses68 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList69 = maintainCourses68.courses;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses68.courses;
        java.util.ArrayList<course.Course> courseList71 = maintainCourses68.courses;
        java.lang.String str72 = maintainCourses68.path;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        course.Course[] courseArray74 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList75 = new java.util.ArrayList<course.Course>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList75, courseArray74);
        maintainCourses73.courses = courseList75;
        maintainCourses68.courses = courseList75;
        maintainCourses57.courses = courseList75;
        maintainCourses38.courses = courseList75;
        maintainCourses21.courses = courseList75;
        maintainCourses0.courses = courseList75;
        java.lang.Class<?> wildcardClass83 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test027");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        java.lang.Class<?> wildcardClass11 = courseList9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test028");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        course.Course[] courseArray4 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList5 = new java.util.ArrayList<course.Course>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList5, courseArray4);
        maintainCourses3.courses = courseList5;
        maintainCourses0.courses = courseList5;
        maintainCourses0.path = "";
        java.lang.String str11 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test029");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.lang.String str12 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "hi!" + "'", str12.equals("hi!"));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test030");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass8 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test031");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test032");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses0.courses = courseList7;
        java.lang.Class<?> wildcardClass10 = courseList7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test033");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test034");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.String str6 = maintainCourses0.path;
        java.lang.String str7 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.lang.String str15 = maintainCourses10.path;
        maintainCourses10.path = "";
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses18.courses;
        java.lang.String str22 = maintainCourses18.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        course.Course[] courseArray24 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList25 = new java.util.ArrayList<course.Course>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList25, courseArray24);
        maintainCourses23.courses = courseList25;
        maintainCourses18.courses = courseList25;
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses29.courses;
        java.lang.String str33 = maintainCourses29.path;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        course.Course[] courseArray35 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList36 = new java.util.ArrayList<course.Course>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList36, courseArray35);
        maintainCourses34.courses = courseList36;
        maintainCourses29.courses = courseList36;
        maintainCourses18.courses = courseList36;
        maintainCourses10.courses = courseList36;
        maintaining.MaintainCourses maintainCourses42 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses43 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList44 = maintainCourses43.courses;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses43.courses;
        maintainCourses42.courses = courseList45;
        java.util.ArrayList<course.Course> courseList47 = maintainCourses42.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses42.courses;
        maintaining.MaintainCourses maintainCourses49 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses50 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList51 = maintainCourses50.courses;
        java.util.ArrayList<course.Course> courseList52 = maintainCourses50.courses;
        maintainCourses49.courses = courseList52;
        java.lang.String str54 = maintainCourses49.path;
        java.util.ArrayList<course.Course> courseList55 = maintainCourses49.courses;
        maintainCourses42.courses = courseList55;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses58 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList59 = maintainCourses58.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses58.courses;
        maintainCourses57.courses = courseList60;
        java.lang.String str62 = maintainCourses57.path;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses57.courses;
        maintainCourses42.courses = courseList63;
        maintainCourses10.courses = courseList63;
        maintainCourses0.courses = courseList63;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test035");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass14 = courseList13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test036");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        maintainCourses16.courses = courseList19;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses16.courses;
        maintainCourses0.courses = courseList23;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList27 = maintainCourses26.courses;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses26.courses;
        maintainCourses25.courses = courseList28;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses25.courses;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.lang.String str37 = maintainCourses32.path;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintainCourses25.courses = courseList38;
        java.lang.String str40 = maintainCourses25.path;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses25.courses;
        maintainCourses0.courses = courseList41;
        java.util.ArrayList<course.Course> courseList43 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass44 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test037");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "hi!";
        java.lang.Class<?> wildcardClass13 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test038");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList4 = maintainCourses3.courses;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses3.courses;
        maintainCourses2.courses = courseList5;
        java.util.ArrayList<course.Course> courseList7 = maintainCourses2.courses;
        course.Course[] courseArray8 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList9 = new java.util.ArrayList<course.Course>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList9, courseArray8);
        maintainCourses2.courses = courseList9;
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        course.Course[] courseArray13 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList14 = new java.util.ArrayList<course.Course>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList14, courseArray13);
        maintainCourses12.courses = courseList14;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintainCourses17.path = "";
        java.util.ArrayList<course.Course> courseList20 = maintainCourses17.courses;
        maintainCourses12.courses = courseList20;
        maintainCourses2.courses = courseList20;
        maintainCourses0.courses = courseList20;
        java.lang.String str24 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass25 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test039");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        java.lang.String str15 = maintainCourses11.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        course.Course[] courseArray17 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList18 = new java.util.ArrayList<course.Course>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList18, courseArray17);
        maintainCourses16.courses = courseList18;
        maintainCourses11.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        maintainCourses23.path = "";
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        course.Course[] courseArray27 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList28 = new java.util.ArrayList<course.Course>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList28, courseArray27);
        maintainCourses26.courses = courseList28;
        maintainCourses23.courses = courseList28;
        maintainCourses0.courses = courseList28;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test040");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList13 = maintainCourses12.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses12.courses;
        java.lang.String str15 = maintainCourses12.path;
        maintainCourses12.path = "hi!";
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        maintainCourses18.courses = courseList21;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses18.courses;
        maintainCourses12.courses = courseList25;
        maintainCourses0.courses = courseList25;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test041");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses8.courses;
        java.lang.String str12 = maintainCourses8.path;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        course.Course[] courseArray14 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList15 = new java.util.ArrayList<course.Course>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList15, courseArray14);
        maintainCourses13.courses = courseList15;
        maintainCourses8.courses = courseList15;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintainCourses8.courses = courseList26;
        maintainCourses0.courses = courseList26;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses32.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        maintainCourses39.courses = courseList42;
        java.lang.String str44 = maintainCourses39.path;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses39.courses;
        maintainCourses32.courses = courseList45;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList49 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses48.courses;
        maintainCourses47.courses = courseList50;
        java.lang.String str52 = maintainCourses47.path;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses47.courses;
        maintainCourses32.courses = courseList53;
        maintainCourses0.courses = courseList53;
        maintaining.MaintainCourses maintainCourses56 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        maintainCourses56.courses = courseList59;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses56.courses;
        java.util.ArrayList<course.Course> courseList62 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses63 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses64 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList65 = maintainCourses64.courses;
        java.util.ArrayList<course.Course> courseList66 = maintainCourses64.courses;
        maintainCourses63.courses = courseList66;
        java.lang.String str68 = maintainCourses63.path;
        java.util.ArrayList<course.Course> courseList69 = maintainCourses63.courses;
        maintainCourses56.courses = courseList69;
        java.lang.String str71 = maintainCourses56.path;
        java.util.ArrayList<course.Course> courseList72 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses74 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList75 = maintainCourses74.courses;
        java.util.ArrayList<course.Course> courseList76 = maintainCourses74.courses;
        maintainCourses73.courses = courseList76;
        java.lang.String str78 = maintainCourses73.path;
        java.util.ArrayList<course.Course> courseList79 = maintainCourses73.courses;
        maintainCourses56.courses = courseList79;
        maintainCourses0.courses = courseList79;
        java.util.ArrayList<course.Course> courseList82 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass83 = courseList82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test042");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        course.Course[] courseArray11 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList12 = new java.util.ArrayList<course.Course>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList12, courseArray11);
        maintainCourses10.courses = courseList12;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintainCourses15.path = "";
        java.util.ArrayList<course.Course> courseList18 = maintainCourses15.courses;
        maintainCourses10.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintainCourses0.path = "hi!";
        java.lang.Class<?> wildcardClass23 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test043");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses0.courses = courseList6;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test044");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        java.lang.String str15 = maintainCourses11.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        course.Course[] courseArray17 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList18 = new java.util.ArrayList<course.Course>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList18, courseArray17);
        maintainCourses16.courses = courseList18;
        maintainCourses11.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        maintainCourses23.path = "";
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        course.Course[] courseArray27 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList28 = new java.util.ArrayList<course.Course>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList28, courseArray27);
        maintainCourses26.courses = courseList28;
        maintainCourses23.courses = courseList28;
        maintainCourses0.courses = courseList28;
        java.lang.Class<?> wildcardClass33 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test045");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList6 = maintainCourses5.courses;
        java.util.ArrayList<course.Course> courseList7 = maintainCourses5.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        java.lang.String str9 = maintainCourses5.path;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        course.Course[] courseArray11 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList12 = new java.util.ArrayList<course.Course>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList12, courseArray11);
        maintainCourses10.courses = courseList12;
        maintainCourses5.courses = courseList12;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList17 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses16.courses;
        java.lang.String str20 = maintainCourses16.path;
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        course.Course[] courseArray22 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList23 = new java.util.ArrayList<course.Course>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList23, courseArray22);
        maintainCourses21.courses = courseList23;
        maintainCourses16.courses = courseList23;
        maintainCourses5.courses = courseList23;
        maintainCourses0.courses = courseList23;
        java.lang.Class<?> wildcardClass29 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test046");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        java.lang.Class<?> wildcardClass13 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test047");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList13 = maintainCourses12.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses12.courses;
        maintainCourses11.courses = courseList14;
        java.lang.String str16 = maintainCourses11.path;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses11.courses;
        maintainCourses0.courses = courseList17;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList33 = maintainCourses30.courses;
        java.lang.String str34 = maintainCourses30.path;
        maintaining.MaintainCourses maintainCourses35 = new maintaining.MaintainCourses();
        course.Course[] courseArray36 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList37 = new java.util.ArrayList<course.Course>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList37, courseArray36);
        maintainCourses35.courses = courseList37;
        maintainCourses30.courses = courseList37;
        maintainCourses19.courses = courseList37;
        maintainCourses0.courses = courseList37;
        maintaining.MaintainCourses maintainCourses43 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses44 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList45 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses44.courses;
        maintainCourses43.courses = courseList46;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses43.courses;
        course.Course[] courseArray49 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList50 = new java.util.ArrayList<course.Course>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList50, courseArray49);
        maintainCourses43.courses = courseList50;
        maintaining.MaintainCourses maintainCourses53 = new maintaining.MaintainCourses();
        course.Course[] courseArray54 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList55 = new java.util.ArrayList<course.Course>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList55, courseArray54);
        maintainCourses53.courses = courseList55;
        maintaining.MaintainCourses maintainCourses58 = new maintaining.MaintainCourses();
        maintainCourses58.path = "";
        java.util.ArrayList<course.Course> courseList61 = maintainCourses58.courses;
        maintainCourses53.courses = courseList61;
        maintainCourses43.courses = courseList61;
        maintaining.MaintainCourses maintainCourses64 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList65 = maintainCourses64.courses;
        java.util.ArrayList<course.Course> courseList66 = maintainCourses64.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses64.courses;
        java.lang.String str68 = maintainCourses64.path;
        maintainCourses64.path = "";
        maintaining.MaintainCourses maintainCourses71 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList72 = maintainCourses71.courses;
        maintainCourses64.courses = courseList72;
        maintainCourses43.courses = courseList72;
        java.util.ArrayList<course.Course> courseList75 = maintainCourses43.courses;
        maintainCourses0.courses = courseList75;
        java.lang.Class<?> wildcardClass77 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test048");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass4 = courseList3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test049");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList17 = maintainCourses0.courses;
        java.lang.String str18 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test050");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        java.lang.Class<?> wildcardClass10 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test051");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        maintainCourses0.path = "";
        java.lang.Class<?> wildcardClass13 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test052");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        java.lang.Class<?> wildcardClass6 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test053");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        java.lang.String str15 = maintainCourses11.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        course.Course[] courseArray17 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList18 = new java.util.ArrayList<course.Course>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList18, courseArray17);
        maintainCourses16.courses = courseList18;
        maintainCourses11.courses = courseList18;
        maintainCourses0.courses = courseList18;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test054");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test055");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        java.lang.String str18 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "hi!" + "'", str18.equals("hi!"));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test056");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList16 = maintainCourses15.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses17.courses;
        course.Course[] courseArray23 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList24 = new java.util.ArrayList<course.Course>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList24, courseArray23);
        maintainCourses17.courses = courseList24;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        course.Course[] courseArray28 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList29 = new java.util.ArrayList<course.Course>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList29, courseArray28);
        maintainCourses27.courses = courseList29;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintainCourses32.path = "";
        java.util.ArrayList<course.Course> courseList35 = maintainCourses32.courses;
        maintainCourses27.courses = courseList35;
        maintainCourses17.courses = courseList35;
        maintainCourses15.courses = courseList35;
        maintainCourses0.courses = courseList35;
        java.lang.String str40 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test057");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        java.lang.String str5 = maintainCourses0.path;
        java.lang.String str6 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList16 = maintainCourses15.courses;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses15.courses;
        maintainCourses14.courses = courseList17;
        java.lang.String str19 = maintainCourses14.path;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses14.courses;
        maintainCourses7.courses = courseList20;
        java.lang.String str22 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses7.courses;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList26 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses25.courses;
        maintainCourses24.courses = courseList27;
        java.lang.String str29 = maintainCourses24.path;
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList33 = maintainCourses30.courses;
        maintainCourses24.courses = courseList33;
        maintaining.MaintainCourses maintainCourses35 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        maintainCourses35.courses = courseList38;
        java.lang.String str40 = maintainCourses35.path;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses35.courses;
        maintainCourses24.courses = courseList41;
        maintaining.MaintainCourses maintainCourses43 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList44 = maintainCourses43.courses;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses43.courses;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses43.courses;
        java.lang.String str47 = maintainCourses43.path;
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        course.Course[] courseArray49 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList50 = new java.util.ArrayList<course.Course>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList50, courseArray49);
        maintainCourses48.courses = courseList50;
        maintainCourses43.courses = courseList50;
        maintaining.MaintainCourses maintainCourses54 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList55 = maintainCourses54.courses;
        java.util.ArrayList<course.Course> courseList56 = maintainCourses54.courses;
        java.util.ArrayList<course.Course> courseList57 = maintainCourses54.courses;
        java.lang.String str58 = maintainCourses54.path;
        maintaining.MaintainCourses maintainCourses59 = new maintaining.MaintainCourses();
        course.Course[] courseArray60 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList61 = new java.util.ArrayList<course.Course>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList61, courseArray60);
        maintainCourses59.courses = courseList61;
        maintainCourses54.courses = courseList61;
        maintainCourses43.courses = courseList61;
        maintainCourses24.courses = courseList61;
        maintainCourses7.courses = courseList61;
        maintaining.MaintainCourses maintainCourses68 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList69 = maintainCourses68.courses;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses68.courses;
        java.lang.String str71 = maintainCourses68.path;
        maintaining.MaintainCourses maintainCourses72 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList73 = maintainCourses72.courses;
        java.util.ArrayList<course.Course> courseList74 = maintainCourses72.courses;
        maintainCourses68.courses = courseList74;
        maintainCourses7.courses = courseList74;
        java.util.ArrayList<course.Course> courseList77 = maintainCourses7.courses;
        maintainCourses0.courses = courseList77;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList77);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test058");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses1.courses;
        course.Course[] courseArray7 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList8 = new java.util.ArrayList<course.Course>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList8, courseArray7);
        maintainCourses1.courses = courseList8;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        course.Course[] courseArray12 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList13 = new java.util.ArrayList<course.Course>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList13, courseArray12);
        maintainCourses11.courses = courseList13;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintainCourses16.path = "";
        java.util.ArrayList<course.Course> courseList19 = maintainCourses16.courses;
        maintainCourses11.courses = courseList19;
        maintainCourses1.courses = courseList19;
        maintaining.MaintainCourses maintainCourses22 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList23 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses22.courses;
        java.lang.String str26 = maintainCourses22.path;
        maintainCourses22.path = "";
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        maintainCourses22.courses = courseList30;
        maintainCourses1.courses = courseList30;
        maintainCourses0.courses = courseList30;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test059");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        java.lang.String str14 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass16 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test060");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        maintainCourses0.courses = courseList8;
        maintainCourses0.path = "";
        java.lang.String str12 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test061");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses17.courses;
        maintainCourses0.courses = courseList23;
        java.lang.Class<?> wildcardClass25 = courseList23.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test062");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.String str17 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass18 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test063");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        java.lang.String str5 = maintainCourses0.path;
        java.lang.String str6 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass8 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test064");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = null;
        maintainCourses0.courses = courseList15;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test065");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses17.courses;
        maintainCourses10.courses = courseList23;
        java.lang.String str25 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList29 = maintainCourses28.courses;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses28.courses;
        maintainCourses27.courses = courseList30;
        java.lang.String str32 = maintainCourses27.path;
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses33.courses;
        maintainCourses27.courses = courseList36;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        java.util.ArrayList<course.Course> courseList44 = maintainCourses38.courses;
        maintainCourses27.courses = courseList44;
        maintaining.MaintainCourses maintainCourses46 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList47 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses46.courses;
        java.lang.String str50 = maintainCourses46.path;
        maintaining.MaintainCourses maintainCourses51 = new maintaining.MaintainCourses();
        course.Course[] courseArray52 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList53 = new java.util.ArrayList<course.Course>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList53, courseArray52);
        maintainCourses51.courses = courseList53;
        maintainCourses46.courses = courseList53;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintainCourses46.courses = courseList64;
        maintainCourses27.courses = courseList64;
        maintainCourses10.courses = courseList64;
        maintainCourses0.courses = courseList64;
        java.lang.String str72 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses74 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList75 = maintainCourses74.courses;
        java.util.ArrayList<course.Course> courseList76 = maintainCourses74.courses;
        maintainCourses73.courses = courseList76;
        java.lang.String str78 = maintainCourses73.path;
        java.util.ArrayList<course.Course> courseList79 = maintainCourses73.courses;
        maintaining.MaintainCourses maintainCourses80 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList81 = maintainCourses80.courses;
        maintainCourses73.courses = courseList81;
        maintainCourses0.courses = courseList81;
        java.lang.Class<?> wildcardClass84 = courseList81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test066");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses17.courses;
        maintainCourses10.courses = courseList23;
        java.lang.String str25 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList29 = maintainCourses28.courses;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses28.courses;
        maintainCourses27.courses = courseList30;
        java.lang.String str32 = maintainCourses27.path;
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses33.courses;
        maintainCourses27.courses = courseList36;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        java.util.ArrayList<course.Course> courseList44 = maintainCourses38.courses;
        maintainCourses27.courses = courseList44;
        maintaining.MaintainCourses maintainCourses46 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList47 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses46.courses;
        java.lang.String str50 = maintainCourses46.path;
        maintaining.MaintainCourses maintainCourses51 = new maintaining.MaintainCourses();
        course.Course[] courseArray52 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList53 = new java.util.ArrayList<course.Course>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList53, courseArray52);
        maintainCourses51.courses = courseList53;
        maintainCourses46.courses = courseList53;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintainCourses46.courses = courseList64;
        maintainCourses27.courses = courseList64;
        maintainCourses10.courses = courseList64;
        maintainCourses0.courses = courseList64;
        maintaining.MaintainCourses maintainCourses72 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList74 = maintainCourses73.courses;
        java.util.ArrayList<course.Course> courseList75 = maintainCourses73.courses;
        maintainCourses72.courses = courseList75;
        java.util.ArrayList<course.Course> courseList77 = maintainCourses72.courses;
        course.Course[] courseArray78 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList79 = new java.util.ArrayList<course.Course>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList79, courseArray78);
        maintainCourses72.courses = courseList79;
        maintainCourses0.courses = courseList79;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test067");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        java.lang.String str37 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "hi!" + "'", str37.equals("hi!"));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test068");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        course.Course[] courseArray13 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList14 = new java.util.ArrayList<course.Course>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList14, courseArray13);
        maintainCourses12.courses = courseList14;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses12.courses;
        maintainCourses12.path = "";
        maintainCourses12.path = "";
        maintainCourses12.path = "hi!";
        java.util.ArrayList<course.Course> courseList24 = maintainCourses12.courses;
        maintainCourses0.courses = courseList24;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test069");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        course.Course[] courseArray4 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList5 = new java.util.ArrayList<course.Course>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList5, courseArray4);
        maintainCourses3.courses = courseList5;
        maintainCourses0.courses = courseList5;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test070");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList10 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass11 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test071");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses17.courses;
        maintainCourses10.courses = courseList23;
        java.lang.String str25 = maintainCourses10.path;
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList28 = maintainCourses27.courses;
        java.util.ArrayList<course.Course> courseList29 = maintainCourses27.courses;
        maintainCourses26.courses = courseList29;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses26.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses26.courses;
        java.util.ArrayList<course.Course> courseList33 = maintainCourses26.courses;
        maintainCourses10.courses = courseList33;
        maintaining.MaintainCourses maintainCourses35 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        maintainCourses35.courses = courseList38;
        java.util.ArrayList<course.Course> courseList40 = maintainCourses35.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses35.courses;
        maintaining.MaintainCourses maintainCourses42 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses43 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList44 = maintainCourses43.courses;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses43.courses;
        maintainCourses42.courses = courseList45;
        java.lang.String str47 = maintainCourses42.path;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses42.courses;
        maintainCourses35.courses = courseList48;
        java.lang.String str50 = maintainCourses35.path;
        java.util.ArrayList<course.Course> courseList51 = maintainCourses35.courses;
        maintainCourses10.courses = courseList51;
        maintaining.MaintainCourses maintainCourses53 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses54 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList55 = maintainCourses54.courses;
        java.util.ArrayList<course.Course> courseList56 = maintainCourses54.courses;
        maintainCourses53.courses = courseList56;
        java.util.ArrayList<course.Course> courseList58 = maintainCourses53.courses;
        maintainCourses10.courses = courseList58;
        maintainCourses0.courses = courseList58;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test072");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses17.courses;
        maintainCourses10.courses = courseList23;
        java.lang.String str25 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList29 = maintainCourses28.courses;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses28.courses;
        maintainCourses27.courses = courseList30;
        java.lang.String str32 = maintainCourses27.path;
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses33.courses;
        maintainCourses27.courses = courseList36;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        java.util.ArrayList<course.Course> courseList44 = maintainCourses38.courses;
        maintainCourses27.courses = courseList44;
        maintaining.MaintainCourses maintainCourses46 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList47 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses46.courses;
        java.lang.String str50 = maintainCourses46.path;
        maintaining.MaintainCourses maintainCourses51 = new maintaining.MaintainCourses();
        course.Course[] courseArray52 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList53 = new java.util.ArrayList<course.Course>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList53, courseArray52);
        maintainCourses51.courses = courseList53;
        maintainCourses46.courses = courseList53;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintainCourses46.courses = courseList64;
        maintainCourses27.courses = courseList64;
        maintainCourses10.courses = courseList64;
        maintainCourses0.courses = courseList64;
        maintaining.MaintainCourses maintainCourses72 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList74 = maintainCourses73.courses;
        java.util.ArrayList<course.Course> courseList75 = maintainCourses73.courses;
        maintainCourses72.courses = courseList75;
        java.util.ArrayList<course.Course> courseList77 = maintainCourses72.courses;
        course.Course[] courseArray78 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList79 = new java.util.ArrayList<course.Course>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList79, courseArray78);
        maintainCourses72.courses = courseList79;
        maintainCourses0.courses = courseList79;
        java.lang.Class<?> wildcardClass83 = courseList79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test073");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses0.courses;
        java.lang.String str12 = maintainCourses0.path;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test074");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList16 = maintainCourses15.courses;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses15.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses15.courses;
        java.lang.String str19 = maintainCourses15.path;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        course.Course[] courseArray21 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList22 = new java.util.ArrayList<course.Course>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList22, courseArray21);
        maintainCourses20.courses = courseList22;
        maintainCourses15.courses = courseList22;
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList27 = maintainCourses26.courses;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses26.courses;
        java.util.ArrayList<course.Course> courseList29 = maintainCourses26.courses;
        maintainCourses15.courses = courseList29;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses15.courses;
        java.lang.String str32 = maintainCourses15.path;
        maintainCourses15.path = "";
        java.lang.String str35 = maintainCourses15.path;
        maintainCourses15.path = "";
        java.util.ArrayList<course.Course> courseList38 = maintainCourses15.courses;
        maintainCourses0.courses = courseList38;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "" + "'", str35.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test075");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        java.lang.String str35 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        maintainCourses36.courses = courseList50;
        java.util.ArrayList<course.Course> courseList52 = maintainCourses36.courses;
        maintainCourses0.courses = courseList52;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList52);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test076");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test077");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.String str17 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass20 = courseList19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test078");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        java.lang.String str15 = maintainCourses11.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        course.Course[] courseArray17 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList18 = new java.util.ArrayList<course.Course>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList18, courseArray17);
        maintainCourses16.courses = courseList18;
        maintainCourses11.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        maintainCourses23.path = "";
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        course.Course[] courseArray27 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList28 = new java.util.ArrayList<course.Course>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList28, courseArray27);
        maintainCourses26.courses = courseList28;
        maintainCourses23.courses = courseList28;
        maintainCourses0.courses = courseList28;
        java.lang.Class<?> wildcardClass33 = courseList28.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test079");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        course.Course[] courseArray11 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList12 = new java.util.ArrayList<course.Course>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList12, courseArray11);
        maintainCourses10.courses = courseList12;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintainCourses15.path = "";
        java.util.ArrayList<course.Course> courseList18 = maintainCourses15.courses;
        maintainCourses10.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList22 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses21.courses;
        java.lang.String str25 = maintainCourses21.path;
        maintainCourses21.path = "";
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList29 = maintainCourses28.courses;
        maintainCourses21.courses = courseList29;
        maintainCourses0.courses = courseList29;
        java.lang.Class<?> wildcardClass32 = courseList29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test080");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList17 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses16.courses;
        maintainCourses15.courses = courseList18;
        java.lang.String str20 = maintainCourses15.path;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses15.courses;
        maintainCourses0.courses = courseList21;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList25 = maintainCourses24.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses24.courses;
        maintainCourses23.courses = courseList26;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList29 = maintainCourses23.courses;
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses31 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList32 = maintainCourses31.courses;
        java.util.ArrayList<course.Course> courseList33 = maintainCourses31.courses;
        maintainCourses30.courses = courseList33;
        java.lang.String str35 = maintainCourses30.path;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses30.courses;
        maintainCourses23.courses = courseList36;
        java.lang.String str38 = maintainCourses23.path;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        maintainCourses39.courses = courseList42;
        java.util.ArrayList<course.Course> courseList44 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses39.courses;
        maintainCourses23.courses = courseList46;
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses49 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList50 = maintainCourses49.courses;
        java.util.ArrayList<course.Course> courseList51 = maintainCourses49.courses;
        maintainCourses48.courses = courseList51;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList54 = maintainCourses48.courses;
        maintaining.MaintainCourses maintainCourses55 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses56 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList57 = maintainCourses56.courses;
        java.util.ArrayList<course.Course> courseList58 = maintainCourses56.courses;
        maintainCourses55.courses = courseList58;
        java.lang.String str60 = maintainCourses55.path;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses55.courses;
        maintainCourses48.courses = courseList61;
        java.lang.String str63 = maintainCourses48.path;
        java.util.ArrayList<course.Course> courseList64 = maintainCourses48.courses;
        maintainCourses23.courses = courseList64;
        maintainCourses0.courses = courseList64;
        java.lang.Class<?> wildcardClass67 = courseList64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test081");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = null;
        maintainCourses0.courses = courseList15;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses17.courses;
        java.lang.String str21 = maintainCourses17.path;
        maintainCourses17.path = "";
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList25 = maintainCourses24.courses;
        maintainCourses17.courses = courseList25;
        maintainCourses17.path = "";
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        course.Course[] courseArray30 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList31 = new java.util.ArrayList<course.Course>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList31, courseArray30);
        maintainCourses29.courses = courseList31;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        maintainCourses34.path = "";
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        maintainCourses29.courses = courseList37;
        maintainCourses17.courses = courseList37;
        maintainCourses0.courses = courseList37;
        java.lang.Class<?> wildcardClass41 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test082");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList17 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses18.courses;
        java.lang.String str22 = maintainCourses18.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        course.Course[] courseArray24 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList25 = new java.util.ArrayList<course.Course>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList25, courseArray24);
        maintainCourses23.courses = courseList25;
        maintainCourses18.courses = courseList25;
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses29.courses;
        maintainCourses18.courses = courseList32;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses18.courses;
        java.lang.String str35 = maintainCourses18.path;
        maintainCourses18.path = "";
        java.lang.String str38 = maintainCourses18.path;
        maintainCourses18.path = "";
        java.util.ArrayList<course.Course> courseList41 = maintainCourses18.courses;
        maintainCourses0.courses = courseList41;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test083");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses23.courses;
        maintainCourses17.courses = courseList26;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses17.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        java.lang.String str51 = maintainCourses47.path;
        maintaining.MaintainCourses maintainCourses52 = new maintaining.MaintainCourses();
        course.Course[] courseArray53 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList54 = new java.util.ArrayList<course.Course>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList54, courseArray53);
        maintainCourses52.courses = courseList54;
        maintainCourses47.courses = courseList54;
        maintainCourses36.courses = courseList54;
        maintainCourses17.courses = courseList54;
        maintainCourses0.courses = courseList54;
        maintaining.MaintainCourses maintainCourses61 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList62 = maintainCourses61.courses;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses61.courses;
        java.lang.String str64 = maintainCourses61.path;
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses61.courses = courseList67;
        maintainCourses0.courses = courseList67;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass71 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test084");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses8.courses;
        java.lang.String str12 = maintainCourses8.path;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        course.Course[] courseArray14 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList15 = new java.util.ArrayList<course.Course>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList15, courseArray14);
        maintainCourses13.courses = courseList15;
        maintainCourses8.courses = courseList15;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintainCourses8.courses = courseList26;
        maintainCourses0.courses = courseList26;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses32.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        maintainCourses39.courses = courseList42;
        java.lang.String str44 = maintainCourses39.path;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses39.courses;
        maintainCourses32.courses = courseList45;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList49 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses48.courses;
        maintainCourses47.courses = courseList50;
        java.lang.String str52 = maintainCourses47.path;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses47.courses;
        maintainCourses32.courses = courseList53;
        maintainCourses0.courses = courseList53;
        maintaining.MaintainCourses maintainCourses56 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        maintainCourses56.courses = courseList59;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses56.courses;
        java.util.ArrayList<course.Course> courseList62 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses63 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses64 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList65 = maintainCourses64.courses;
        java.util.ArrayList<course.Course> courseList66 = maintainCourses64.courses;
        maintainCourses63.courses = courseList66;
        java.lang.String str68 = maintainCourses63.path;
        java.util.ArrayList<course.Course> courseList69 = maintainCourses63.courses;
        maintainCourses56.courses = courseList69;
        java.lang.String str71 = maintainCourses56.path;
        java.util.ArrayList<course.Course> courseList72 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses74 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList75 = maintainCourses74.courses;
        java.util.ArrayList<course.Course> courseList76 = maintainCourses74.courses;
        maintainCourses73.courses = courseList76;
        java.lang.String str78 = maintainCourses73.path;
        java.util.ArrayList<course.Course> courseList79 = maintainCourses73.courses;
        maintainCourses56.courses = courseList79;
        maintainCourses0.courses = courseList79;
        java.lang.Class<?> wildcardClass82 = courseList79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test085");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList13 = maintainCourses12.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses12.courses;
        maintainCourses11.courses = courseList14;
        java.lang.String str16 = maintainCourses11.path;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses11.courses;
        maintainCourses0.courses = courseList17;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList33 = maintainCourses30.courses;
        java.lang.String str34 = maintainCourses30.path;
        maintaining.MaintainCourses maintainCourses35 = new maintaining.MaintainCourses();
        course.Course[] courseArray36 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList37 = new java.util.ArrayList<course.Course>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList37, courseArray36);
        maintainCourses35.courses = courseList37;
        maintainCourses30.courses = courseList37;
        maintainCourses19.courses = courseList37;
        maintainCourses0.courses = courseList37;
        java.lang.String str43 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test086");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        java.lang.String str10 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test087");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.lang.Class<?> wildcardClass16 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test088");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass35 = courseList34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test089");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.String str6 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintainCourses7.path = "hi!";
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.lang.String str15 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintainCourses7.courses = courseList16;
        maintainCourses0.courses = courseList16;
        java.lang.Class<?> wildcardClass19 = courseList16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test090");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses8.courses;
        java.lang.String str12 = maintainCourses8.path;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        course.Course[] courseArray14 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList15 = new java.util.ArrayList<course.Course>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList15, courseArray14);
        maintainCourses13.courses = courseList15;
        maintainCourses8.courses = courseList15;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintainCourses8.courses = courseList26;
        maintainCourses0.courses = courseList26;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses32.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        maintainCourses39.courses = courseList42;
        java.lang.String str44 = maintainCourses39.path;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses39.courses;
        maintainCourses32.courses = courseList45;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList49 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses48.courses;
        maintainCourses47.courses = courseList50;
        java.lang.String str52 = maintainCourses47.path;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses47.courses;
        maintainCourses32.courses = courseList53;
        maintainCourses0.courses = courseList53;
        maintaining.MaintainCourses maintainCourses56 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        maintainCourses56.courses = courseList59;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses56.courses;
        java.util.ArrayList<course.Course> courseList62 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses63 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses64 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList65 = maintainCourses64.courses;
        java.util.ArrayList<course.Course> courseList66 = maintainCourses64.courses;
        maintainCourses63.courses = courseList66;
        java.lang.String str68 = maintainCourses63.path;
        java.util.ArrayList<course.Course> courseList69 = maintainCourses63.courses;
        maintainCourses56.courses = courseList69;
        java.lang.String str71 = maintainCourses56.path;
        java.util.ArrayList<course.Course> courseList72 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses74 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList75 = maintainCourses74.courses;
        java.util.ArrayList<course.Course> courseList76 = maintainCourses74.courses;
        maintainCourses73.courses = courseList76;
        java.lang.String str78 = maintainCourses73.path;
        java.util.ArrayList<course.Course> courseList79 = maintainCourses73.courses;
        maintainCourses56.courses = courseList79;
        maintainCourses0.courses = courseList79;
        java.util.ArrayList<course.Course> courseList82 = maintainCourses0.courses;
        java.lang.String str83 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str83 + "' != '" + "" + "'", str83.equals(""));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test091");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses8.courses;
        java.lang.String str12 = maintainCourses8.path;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        course.Course[] courseArray14 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList15 = new java.util.ArrayList<course.Course>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList15, courseArray14);
        maintainCourses13.courses = courseList15;
        maintainCourses8.courses = courseList15;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintainCourses8.courses = courseList26;
        maintainCourses0.courses = courseList26;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses32.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        maintainCourses39.courses = courseList42;
        java.lang.String str44 = maintainCourses39.path;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses39.courses;
        maintainCourses32.courses = courseList45;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList49 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses48.courses;
        maintainCourses47.courses = courseList50;
        java.lang.String str52 = maintainCourses47.path;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses47.courses;
        maintainCourses32.courses = courseList53;
        maintainCourses0.courses = courseList53;
        maintaining.MaintainCourses maintainCourses56 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        maintainCourses56.courses = courseList59;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses56.courses;
        java.util.ArrayList<course.Course> courseList62 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses63 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses64 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList65 = maintainCourses64.courses;
        java.util.ArrayList<course.Course> courseList66 = maintainCourses64.courses;
        maintainCourses63.courses = courseList66;
        java.lang.String str68 = maintainCourses63.path;
        java.util.ArrayList<course.Course> courseList69 = maintainCourses63.courses;
        maintainCourses56.courses = courseList69;
        java.lang.String str71 = maintainCourses56.path;
        java.util.ArrayList<course.Course> courseList72 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses74 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList75 = maintainCourses74.courses;
        java.util.ArrayList<course.Course> courseList76 = maintainCourses74.courses;
        maintainCourses73.courses = courseList76;
        java.lang.String str78 = maintainCourses73.path;
        java.util.ArrayList<course.Course> courseList79 = maintainCourses73.courses;
        maintainCourses56.courses = courseList79;
        maintainCourses0.courses = courseList79;
        java.lang.String str82 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str82 + "' != '" + "" + "'", str82.equals(""));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test092");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = null;
        maintainCourses0.courses = courseList15;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(courseList17);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test093");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        maintainCourses16.courses = courseList19;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses16.courses;
        maintainCourses0.courses = courseList23;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList27 = maintainCourses26.courses;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses26.courses;
        maintainCourses25.courses = courseList28;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses25.courses;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.lang.String str37 = maintainCourses32.path;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintainCourses25.courses = courseList38;
        java.lang.String str40 = maintainCourses25.path;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses25.courses;
        maintainCourses0.courses = courseList41;
        maintaining.MaintainCourses maintainCourses43 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses44 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList45 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses44.courses;
        maintainCourses43.courses = courseList46;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses43.courses;
        maintainCourses0.courses = courseList48;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test094");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        maintainCourses0.courses = courseList8;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        maintainCourses13.courses = courseList16;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses13.courses;
        course.Course[] courseArray19 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList20 = new java.util.ArrayList<course.Course>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList20, courseArray19);
        maintainCourses13.courses = courseList20;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        course.Course[] courseArray24 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList25 = new java.util.ArrayList<course.Course>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList25, courseArray24);
        maintainCourses23.courses = courseList25;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintainCourses28.path = "";
        java.util.ArrayList<course.Course> courseList31 = maintainCourses28.courses;
        maintainCourses23.courses = courseList31;
        maintainCourses13.courses = courseList31;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        java.lang.String str38 = maintainCourses34.path;
        maintainCourses34.path = "";
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList42 = maintainCourses41.courses;
        maintainCourses34.courses = courseList42;
        maintainCourses13.courses = courseList42;
        maintainCourses12.courses = courseList42;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses12.courses;
        maintainCourses0.courses = courseList46;
        java.lang.Class<?> wildcardClass48 = courseList46.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test095");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        java.lang.String str13 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test096");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses23.courses;
        maintainCourses17.courses = courseList26;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses17.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        java.lang.String str51 = maintainCourses47.path;
        maintaining.MaintainCourses maintainCourses52 = new maintaining.MaintainCourses();
        course.Course[] courseArray53 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList54 = new java.util.ArrayList<course.Course>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList54, courseArray53);
        maintainCourses52.courses = courseList54;
        maintainCourses47.courses = courseList54;
        maintainCourses36.courses = courseList54;
        maintainCourses17.courses = courseList54;
        maintainCourses0.courses = courseList54;
        maintaining.MaintainCourses maintainCourses61 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList62 = maintainCourses61.courses;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses61.courses;
        java.lang.String str64 = maintainCourses61.path;
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses61.courses = courseList67;
        maintainCourses0.courses = courseList67;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test097");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        maintainCourses0.courses = courseList8;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.lang.Class<?> wildcardClass14 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test098");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        maintainCourses13.courses = courseList16;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses13.courses;
        maintainCourses0.courses = courseList18;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test099");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.String str17 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.lang.String str20 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList22 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses21.courses;
        java.lang.String str25 = maintainCourses21.path;
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        course.Course[] courseArray27 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList28 = new java.util.ArrayList<course.Course>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList28, courseArray27);
        maintainCourses26.courses = courseList28;
        maintainCourses21.courses = courseList28;
        maintainCourses21.path = "hi!";
        java.util.ArrayList<course.Course> courseList34 = maintainCourses21.courses;
        maintainCourses0.courses = courseList34;
        java.lang.Class<?> wildcardClass36 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "" + "'", str20.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test100");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        maintainCourses16.courses = courseList19;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses16.courses;
        maintainCourses0.courses = courseList23;
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test101");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList14 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses13.courses;
        maintainCourses12.courses = courseList15;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses12.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses12.courses;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        maintainCourses19.courses = courseList22;
        java.lang.String str24 = maintainCourses19.path;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses19.courses;
        maintainCourses12.courses = courseList25;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList28 = maintainCourses27.courses;
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses30.courses;
        maintainCourses29.courses = courseList32;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses29.courses;
        course.Course[] courseArray35 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList36 = new java.util.ArrayList<course.Course>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList36, courseArray35);
        maintainCourses29.courses = courseList36;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        course.Course[] courseArray40 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList41 = new java.util.ArrayList<course.Course>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList41, courseArray40);
        maintainCourses39.courses = courseList41;
        maintaining.MaintainCourses maintainCourses44 = new maintaining.MaintainCourses();
        maintainCourses44.path = "";
        java.util.ArrayList<course.Course> courseList47 = maintainCourses44.courses;
        maintainCourses39.courses = courseList47;
        maintainCourses29.courses = courseList47;
        maintainCourses27.courses = courseList47;
        maintainCourses12.courses = courseList47;
        maintainCourses0.courses = courseList47;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test102");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        java.lang.String str38 = maintainCourses34.path;
        maintainCourses34.path = "";
        java.util.ArrayList<course.Course> courseList41 = maintainCourses34.courses;
        maintainCourses34.path = "hi!";
        java.util.ArrayList<course.Course> courseList44 = maintainCourses34.courses;
        maintainCourses0.courses = courseList44;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test103");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        maintainCourses0.path = "";
        java.lang.String str6 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass7 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test104");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses7.courses;
        maintainCourses6.courses = courseList9;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses6.courses;
        maintainCourses0.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test105");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.lang.String str7 = maintainCourses0.path;
        java.lang.String str8 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test106");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses1.courses;
        course.Course[] courseArray7 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList8 = new java.util.ArrayList<course.Course>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList8, courseArray7);
        maintainCourses1.courses = courseList8;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        course.Course[] courseArray12 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList13 = new java.util.ArrayList<course.Course>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList13, courseArray12);
        maintainCourses11.courses = courseList13;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintainCourses16.path = "";
        java.util.ArrayList<course.Course> courseList19 = maintainCourses16.courses;
        maintainCourses11.courses = courseList19;
        maintainCourses1.courses = courseList19;
        maintaining.MaintainCourses maintainCourses22 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList23 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses22.courses;
        java.lang.String str26 = maintainCourses22.path;
        maintainCourses22.path = "";
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        maintainCourses22.courses = courseList30;
        maintainCourses1.courses = courseList30;
        maintainCourses0.courses = courseList30;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        java.lang.String str35 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test107");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass13 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test108");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.lang.String str15 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintainCourses0.courses = courseList16;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test109");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses7.courses;
        java.lang.String str11 = maintainCourses7.path;
        maintainCourses7.path = "";
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        maintainCourses7.courses = courseList15;
        maintainCourses7.path = "";
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        course.Course[] courseArray20 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList21 = new java.util.ArrayList<course.Course>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList21, courseArray20);
        maintainCourses19.courses = courseList21;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses19.courses;
        maintainCourses19.path = "";
        maintainCourses19.path = "";
        java.util.ArrayList<course.Course> courseList29 = maintainCourses19.courses;
        maintainCourses7.courses = courseList29;
        maintainCourses0.courses = courseList29;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test110");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses23.courses;
        maintainCourses17.courses = courseList26;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses17.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        java.lang.String str51 = maintainCourses47.path;
        maintaining.MaintainCourses maintainCourses52 = new maintaining.MaintainCourses();
        course.Course[] courseArray53 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList54 = new java.util.ArrayList<course.Course>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList54, courseArray53);
        maintainCourses52.courses = courseList54;
        maintainCourses47.courses = courseList54;
        maintainCourses36.courses = courseList54;
        maintainCourses17.courses = courseList54;
        maintainCourses0.courses = courseList54;
        maintaining.MaintainCourses maintainCourses61 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList62 = maintainCourses61.courses;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses61.courses;
        java.lang.String str64 = maintainCourses61.path;
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses61.courses = courseList67;
        maintainCourses0.courses = courseList67;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList71 = maintainCourses0.courses;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList74 = null;
        maintainCourses0.courses = courseList74;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList71);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test111");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses1.courses;
        course.Course[] courseArray7 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList8 = new java.util.ArrayList<course.Course>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList8, courseArray7);
        maintainCourses1.courses = courseList8;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        course.Course[] courseArray12 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList13 = new java.util.ArrayList<course.Course>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList13, courseArray12);
        maintainCourses11.courses = courseList13;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintainCourses16.path = "";
        java.util.ArrayList<course.Course> courseList19 = maintainCourses16.courses;
        maintainCourses11.courses = courseList19;
        maintainCourses1.courses = courseList19;
        maintaining.MaintainCourses maintainCourses22 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList23 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses22.courses;
        java.lang.String str26 = maintainCourses22.path;
        maintainCourses22.path = "";
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        maintainCourses22.courses = courseList30;
        maintainCourses1.courses = courseList30;
        maintainCourses0.courses = courseList30;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        java.lang.Class<?> wildcardClass37 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test112");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList15 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test113");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses23.courses;
        maintainCourses17.courses = courseList26;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses17.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        java.lang.String str51 = maintainCourses47.path;
        maintaining.MaintainCourses maintainCourses52 = new maintaining.MaintainCourses();
        course.Course[] courseArray53 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList54 = new java.util.ArrayList<course.Course>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList54, courseArray53);
        maintainCourses52.courses = courseList54;
        maintainCourses47.courses = courseList54;
        maintainCourses36.courses = courseList54;
        maintainCourses17.courses = courseList54;
        maintainCourses0.courses = courseList54;
        maintaining.MaintainCourses maintainCourses61 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList62 = maintainCourses61.courses;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses61.courses;
        java.lang.String str64 = maintainCourses61.path;
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses61.courses = courseList67;
        maintainCourses0.courses = courseList67;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList71 = maintainCourses0.courses;
        java.lang.String str72 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test114");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        maintainCourses16.courses = courseList19;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses16.courses;
        maintainCourses0.courses = courseList23;
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList27 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test115");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        course.Course[] courseArray19 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList20 = new java.util.ArrayList<course.Course>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList20, courseArray19);
        maintainCourses18.courses = courseList20;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses18.courses;
        maintainCourses0.courses = courseList23;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList28 = maintainCourses27.courses;
        java.util.ArrayList<course.Course> courseList29 = maintainCourses27.courses;
        maintainCourses26.courses = courseList29;
        java.lang.String str31 = maintainCourses26.path;
        maintainCourses26.path = "";
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        java.lang.String str38 = maintainCourses34.path;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        course.Course[] courseArray40 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList41 = new java.util.ArrayList<course.Course>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList41, courseArray40);
        maintainCourses39.courses = courseList41;
        maintainCourses34.courses = courseList41;
        maintaining.MaintainCourses maintainCourses45 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList46 = maintainCourses45.courses;
        java.util.ArrayList<course.Course> courseList47 = maintainCourses45.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses45.courses;
        java.lang.String str49 = maintainCourses45.path;
        maintaining.MaintainCourses maintainCourses50 = new maintaining.MaintainCourses();
        course.Course[] courseArray51 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList52 = new java.util.ArrayList<course.Course>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList52, courseArray51);
        maintainCourses50.courses = courseList52;
        maintainCourses45.courses = courseList52;
        maintainCourses34.courses = courseList52;
        maintainCourses26.courses = courseList52;
        maintainCourses25.courses = courseList52;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses25.courses;
        java.lang.String str60 = maintainCourses25.path;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses25.courses;
        maintainCourses0.courses = courseList61;
        java.lang.Class<?> wildcardClass63 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test116");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        maintainCourses13.courses = courseList16;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses13.courses;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.lang.String str23 = maintainCourses20.path;
        maintainCourses20.path = "hi!";
        maintainCourses20.path = "hi!";
        java.util.ArrayList<course.Course> courseList28 = maintainCourses20.courses;
        maintainCourses0.courses = courseList28;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test117");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses3.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.lang.String str15 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintainCourses3.courses = courseList16;
        java.lang.String str18 = maintainCourses3.path;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        maintainCourses19.courses = courseList22;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses19.courses;
        maintainCourses3.courses = courseList26;
        maintainCourses0.courses = courseList26;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test118");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        java.lang.String str5 = maintainCourses0.path;
        java.lang.String str6 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test119");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        maintainCourses0.courses = courseList8;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        maintainCourses13.courses = courseList16;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses13.courses;
        course.Course[] courseArray19 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList20 = new java.util.ArrayList<course.Course>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList20, courseArray19);
        maintainCourses13.courses = courseList20;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        course.Course[] courseArray24 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList25 = new java.util.ArrayList<course.Course>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList25, courseArray24);
        maintainCourses23.courses = courseList25;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintainCourses28.path = "";
        java.util.ArrayList<course.Course> courseList31 = maintainCourses28.courses;
        maintainCourses23.courses = courseList31;
        maintainCourses13.courses = courseList31;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        java.lang.String str38 = maintainCourses34.path;
        maintainCourses34.path = "";
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList42 = maintainCourses41.courses;
        maintainCourses34.courses = courseList42;
        maintainCourses13.courses = courseList42;
        maintainCourses12.courses = courseList42;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses12.courses;
        maintainCourses0.courses = courseList46;
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses49 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList50 = maintainCourses49.courses;
        java.util.ArrayList<course.Course> courseList51 = maintainCourses49.courses;
        maintainCourses48.courses = courseList51;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList54 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList55 = maintainCourses48.courses;
        maintainCourses0.courses = courseList55;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test120");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass14 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test121");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        maintainCourses0.path = "";
        java.lang.Class<?> wildcardClass8 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test122");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        maintainCourses13.courses = courseList16;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses13.courses;
        maintainCourses0.courses = courseList18;
        java.lang.Class<?> wildcardClass20 = courseList18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test123");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.String str6 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass8 = courseList7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test124");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList14 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses13.courses;
        java.lang.String str17 = maintainCourses13.path;
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        course.Course[] courseArray19 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList20 = new java.util.ArrayList<course.Course>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList20, courseArray19);
        maintainCourses18.courses = courseList20;
        maintainCourses13.courses = courseList20;
        maintainCourses13.path = "";
        maintainCourses13.path = "hi!";
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        maintainCourses28.courses = courseList37;
        maintainCourses13.courses = courseList37;
        maintainCourses0.courses = courseList37;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList45 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test125");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = null;
        maintainCourses0.courses = courseList15;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses17.courses;
        java.lang.String str21 = maintainCourses17.path;
        maintainCourses17.path = "";
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList25 = maintainCourses24.courses;
        maintainCourses17.courses = courseList25;
        maintainCourses17.path = "";
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        course.Course[] courseArray30 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList31 = new java.util.ArrayList<course.Course>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList31, courseArray30);
        maintainCourses29.courses = courseList31;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        maintainCourses34.path = "";
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        maintainCourses29.courses = courseList37;
        maintainCourses17.courses = courseList37;
        maintainCourses0.courses = courseList37;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test126");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.String str17 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.lang.String str20 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.lang.String str23 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "" + "'", str20.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test127");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass7 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test128");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test129");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintainCourses7.path = "hi!";
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.lang.String str15 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintainCourses7.courses = courseList16;
        maintainCourses0.courses = courseList16;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintainCourses19.path = "";
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList27 = maintainCourses26.courses;
        maintainCourses19.courses = courseList27;
        maintainCourses0.courses = courseList27;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test130");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        java.lang.Class<?> wildcardClass10 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test131");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses0.courses = courseList6;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        java.lang.String str12 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test132");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.String str6 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        java.lang.String str8 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test133");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.lang.String str16 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test134");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.String str17 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test135");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses8.courses;
        java.lang.String str12 = maintainCourses8.path;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        course.Course[] courseArray14 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList15 = new java.util.ArrayList<course.Course>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList15, courseArray14);
        maintainCourses13.courses = courseList15;
        maintainCourses8.courses = courseList15;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintainCourses8.courses = courseList26;
        maintainCourses0.courses = courseList26;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses32.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        maintainCourses39.courses = courseList42;
        java.lang.String str44 = maintainCourses39.path;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses39.courses;
        maintainCourses32.courses = courseList45;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList49 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses48.courses;
        maintainCourses47.courses = courseList50;
        java.lang.String str52 = maintainCourses47.path;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses47.courses;
        maintainCourses32.courses = courseList53;
        maintainCourses0.courses = courseList53;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test136");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList6 = maintainCourses5.courses;
        java.util.ArrayList<course.Course> courseList7 = maintainCourses5.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        java.lang.String str9 = maintainCourses5.path;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        course.Course[] courseArray11 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList12 = new java.util.ArrayList<course.Course>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList12, courseArray11);
        maintainCourses10.courses = courseList12;
        maintainCourses5.courses = courseList12;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList17 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses16.courses;
        java.lang.String str20 = maintainCourses16.path;
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        course.Course[] courseArray22 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList23 = new java.util.ArrayList<course.Course>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList23, courseArray22);
        maintainCourses21.courses = courseList23;
        maintainCourses16.courses = courseList23;
        maintainCourses5.courses = courseList23;
        maintainCourses0.courses = courseList23;
        java.lang.String str29 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test137");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses7.courses;
        maintainCourses6.courses = courseList9;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses6.courses;
        maintainCourses0.courses = courseList13;
        java.lang.Class<?> wildcardClass15 = courseList13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test138");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        java.lang.String str7 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test139");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        maintainCourses16.courses = courseList19;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses16.courses;
        maintainCourses0.courses = courseList23;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList27 = maintainCourses26.courses;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses26.courses;
        maintainCourses25.courses = courseList28;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses25.courses;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.lang.String str37 = maintainCourses32.path;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintainCourses25.courses = courseList38;
        java.lang.String str40 = maintainCourses25.path;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses25.courses;
        maintainCourses0.courses = courseList41;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test140");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList13 = maintainCourses12.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses12.courses;
        maintainCourses11.courses = courseList14;
        java.lang.String str16 = maintainCourses11.path;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses11.courses;
        maintainCourses0.courses = courseList17;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList33 = maintainCourses30.courses;
        java.lang.String str34 = maintainCourses30.path;
        maintaining.MaintainCourses maintainCourses35 = new maintaining.MaintainCourses();
        course.Course[] courseArray36 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList37 = new java.util.ArrayList<course.Course>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList37, courseArray36);
        maintainCourses35.courses = courseList37;
        maintainCourses30.courses = courseList37;
        maintainCourses19.courses = courseList37;
        maintainCourses0.courses = courseList37;
        java.util.ArrayList<course.Course> courseList43 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList43);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test141");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.Class<?> wildcardClass15 = courseList13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test142");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList17 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses16.courses;
        maintainCourses15.courses = courseList18;
        java.lang.String str20 = maintainCourses15.path;
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList22 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses21.courses;
        maintainCourses15.courses = courseList24;
        maintainCourses0.courses = courseList24;
        java.lang.String str27 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!" + "'", str27.equals("hi!"));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test143");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.String str17 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.lang.String str20 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass22 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "" + "'", str20.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test144");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        maintainCourses13.courses = courseList16;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses13.courses;
        maintainCourses0.courses = courseList19;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test145");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses23.courses;
        maintainCourses17.courses = courseList26;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses17.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        java.lang.String str51 = maintainCourses47.path;
        maintaining.MaintainCourses maintainCourses52 = new maintaining.MaintainCourses();
        course.Course[] courseArray53 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList54 = new java.util.ArrayList<course.Course>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList54, courseArray53);
        maintainCourses52.courses = courseList54;
        maintainCourses47.courses = courseList54;
        maintainCourses36.courses = courseList54;
        maintainCourses17.courses = courseList54;
        maintainCourses0.courses = courseList54;
        maintaining.MaintainCourses maintainCourses61 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList62 = maintainCourses61.courses;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses61.courses;
        java.lang.String str64 = maintainCourses61.path;
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses61.courses = courseList67;
        maintainCourses0.courses = courseList67;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList71 = maintainCourses0.courses;
        java.lang.String str72 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList73 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList76 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList76);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test146");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        java.lang.Class<?> wildcardClass11 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test147");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        java.lang.String str4 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass5 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test148");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        java.lang.String str35 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test149");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.String str17 = maintainCourses0.path;
        java.lang.String str18 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList33 = maintainCourses30.courses;
        maintainCourses19.courses = courseList33;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses19.courses;
        java.lang.String str36 = maintainCourses19.path;
        maintainCourses19.path = "";
        java.lang.String str39 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList43 = maintainCourses40.courses;
        java.lang.String str44 = maintainCourses40.path;
        maintaining.MaintainCourses maintainCourses45 = new maintaining.MaintainCourses();
        course.Course[] courseArray46 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList47 = new java.util.ArrayList<course.Course>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList47, courseArray46);
        maintainCourses45.courses = courseList47;
        maintainCourses40.courses = courseList47;
        maintainCourses40.path = "hi!";
        java.util.ArrayList<course.Course> courseList53 = maintainCourses40.courses;
        maintainCourses19.courses = courseList53;
        maintainCourses0.courses = courseList53;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test150");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList17 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses16.courses;
        maintainCourses15.courses = courseList18;
        java.lang.String str20 = maintainCourses15.path;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses15.courses;
        maintainCourses0.courses = courseList21;
        java.lang.Class<?> wildcardClass23 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test151");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        course.Course[] courseArray4 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList5 = new java.util.ArrayList<course.Course>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList5, courseArray4);
        maintainCourses3.courses = courseList5;
        maintainCourses0.courses = courseList5;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList11 = maintainCourses0.courses;
        java.lang.String str12 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test152");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.lang.String str7 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        maintainCourses8.courses = courseList11;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses8.courses;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList17 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses16.courses;
        maintainCourses15.courses = courseList18;
        java.lang.String str20 = maintainCourses15.path;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses15.courses;
        maintainCourses8.courses = courseList21;
        java.lang.String str23 = maintainCourses8.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList26 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses25.courses;
        maintainCourses24.courses = courseList27;
        java.util.ArrayList<course.Course> courseList29 = maintainCourses24.courses;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses24.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses24.courses;
        maintainCourses8.courses = courseList31;
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        maintainCourses33.courses = courseList36;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses33.courses;
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList42 = maintainCourses41.courses;
        java.util.ArrayList<course.Course> courseList43 = maintainCourses41.courses;
        maintainCourses40.courses = courseList43;
        java.lang.String str45 = maintainCourses40.path;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses40.courses;
        maintainCourses33.courses = courseList46;
        java.lang.String str48 = maintainCourses33.path;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses33.courses;
        maintainCourses8.courses = courseList49;
        java.util.ArrayList<course.Course> courseList51 = maintainCourses8.courses;
        maintainCourses0.courses = courseList51;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList51);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test153");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        java.lang.String str8 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test154");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.lang.String str16 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test155");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        maintainCourses0.path = "";
        java.lang.String str6 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses7.courses;
        java.lang.String str11 = maintainCourses7.path;
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        course.Course[] courseArray13 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList14 = new java.util.ArrayList<course.Course>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList14, courseArray13);
        maintainCourses12.courses = courseList14;
        maintainCourses7.courses = courseList14;
        maintainCourses7.path = "";
        java.util.ArrayList<course.Course> courseList20 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses7.courses;
        maintainCourses0.courses = courseList21;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test156");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses8.courses;
        java.lang.String str12 = maintainCourses8.path;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        course.Course[] courseArray14 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList15 = new java.util.ArrayList<course.Course>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList15, courseArray14);
        maintainCourses13.courses = courseList15;
        maintainCourses8.courses = courseList15;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintainCourses8.courses = courseList26;
        maintainCourses0.courses = courseList26;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses32.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        maintainCourses39.courses = courseList42;
        java.lang.String str44 = maintainCourses39.path;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses39.courses;
        maintainCourses32.courses = courseList45;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList49 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses48.courses;
        maintainCourses47.courses = courseList50;
        java.lang.String str52 = maintainCourses47.path;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses47.courses;
        maintainCourses32.courses = courseList53;
        maintainCourses0.courses = courseList53;
        maintaining.MaintainCourses maintainCourses56 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        maintainCourses56.courses = courseList59;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses56.courses;
        java.util.ArrayList<course.Course> courseList62 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses63 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses64 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList65 = maintainCourses64.courses;
        java.util.ArrayList<course.Course> courseList66 = maintainCourses64.courses;
        maintainCourses63.courses = courseList66;
        java.lang.String str68 = maintainCourses63.path;
        java.util.ArrayList<course.Course> courseList69 = maintainCourses63.courses;
        maintainCourses56.courses = courseList69;
        java.lang.String str71 = maintainCourses56.path;
        java.util.ArrayList<course.Course> courseList72 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses74 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList75 = maintainCourses74.courses;
        java.util.ArrayList<course.Course> courseList76 = maintainCourses74.courses;
        maintainCourses73.courses = courseList76;
        java.lang.String str78 = maintainCourses73.path;
        java.util.ArrayList<course.Course> courseList79 = maintainCourses73.courses;
        maintainCourses56.courses = courseList79;
        maintainCourses0.courses = courseList79;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList79);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test157");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        course.Course[] courseArray11 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList12 = new java.util.ArrayList<course.Course>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList12, courseArray11);
        maintainCourses10.courses = courseList12;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintainCourses15.path = "";
        java.util.ArrayList<course.Course> courseList18 = maintainCourses15.courses;
        maintainCourses10.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses22 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList23 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses22.courses;
        maintainCourses21.courses = courseList24;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses21.courses;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses21.courses = courseList34;
        java.lang.String str36 = maintainCourses21.path;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses21.courses;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        maintaining.MaintainCourses maintainCourses44 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList45 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList47 = maintainCourses44.courses;
        maintainCourses38.courses = courseList47;
        maintaining.MaintainCourses maintainCourses49 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses50 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList51 = maintainCourses50.courses;
        java.util.ArrayList<course.Course> courseList52 = maintainCourses50.courses;
        maintainCourses49.courses = courseList52;
        java.lang.String str54 = maintainCourses49.path;
        java.util.ArrayList<course.Course> courseList55 = maintainCourses49.courses;
        maintainCourses38.courses = courseList55;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintaining.MaintainCourses maintainCourses68 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList69 = maintainCourses68.courses;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses68.courses;
        java.util.ArrayList<course.Course> courseList71 = maintainCourses68.courses;
        java.lang.String str72 = maintainCourses68.path;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        course.Course[] courseArray74 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList75 = new java.util.ArrayList<course.Course>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList75, courseArray74);
        maintainCourses73.courses = courseList75;
        maintainCourses68.courses = courseList75;
        maintainCourses57.courses = courseList75;
        maintainCourses38.courses = courseList75;
        maintainCourses21.courses = courseList75;
        maintainCourses0.courses = courseList75;
        java.lang.String str83 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList84 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses85 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses86 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList87 = maintainCourses86.courses;
        java.util.ArrayList<course.Course> courseList88 = maintainCourses86.courses;
        maintainCourses85.courses = courseList88;
        java.lang.String str90 = maintainCourses85.path;
        java.util.ArrayList<course.Course> courseList91 = maintainCourses85.courses;
        maintainCourses0.courses = courseList91;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList91);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test158");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test159");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList13 = maintainCourses12.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses12.courses;
        maintainCourses11.courses = courseList14;
        java.lang.String str16 = maintainCourses11.path;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses11.courses;
        maintainCourses0.courses = courseList17;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test160");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test161");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        maintainCourses0.courses = courseList8;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        course.Course[] courseArray13 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList14 = new java.util.ArrayList<course.Course>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList14, courseArray13);
        maintainCourses12.courses = courseList14;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintainCourses17.path = "";
        java.util.ArrayList<course.Course> courseList20 = maintainCourses17.courses;
        maintainCourses12.courses = courseList20;
        maintainCourses0.courses = courseList20;
        java.lang.String str23 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test162");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses7.courses;
        maintainCourses6.courses = courseList9;
        java.lang.String str11 = maintainCourses6.path;
        maintainCourses6.path = "";
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses14.courses;
        java.lang.String str18 = maintainCourses14.path;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        course.Course[] courseArray20 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList21 = new java.util.ArrayList<course.Course>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList21, courseArray20);
        maintainCourses19.courses = courseList21;
        maintainCourses14.courses = courseList21;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList26 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses25.courses;
        java.lang.String str29 = maintainCourses25.path;
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        course.Course[] courseArray31 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList32 = new java.util.ArrayList<course.Course>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList32, courseArray31);
        maintainCourses30.courses = courseList32;
        maintainCourses25.courses = courseList32;
        maintainCourses14.courses = courseList32;
        maintainCourses6.courses = courseList32;
        maintainCourses0.courses = courseList32;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        maintainCourses39.courses = courseList42;
        java.util.ArrayList<course.Course> courseList44 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses39.courses;
        maintaining.MaintainCourses maintainCourses46 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        maintainCourses46.courses = courseList49;
        java.lang.String str51 = maintainCourses46.path;
        java.util.ArrayList<course.Course> courseList52 = maintainCourses46.courses;
        maintainCourses39.courses = courseList52;
        java.lang.String str54 = maintainCourses39.path;
        java.util.ArrayList<course.Course> courseList55 = maintainCourses39.courses;
        maintainCourses0.courses = courseList55;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses58 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList59 = maintainCourses58.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses58.courses;
        maintainCourses57.courses = courseList60;
        java.util.ArrayList<course.Course> courseList62 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses57.courses;
        maintaining.MaintainCourses maintainCourses64 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses64.courses = courseList67;
        java.lang.String str69 = maintainCourses64.path;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses64.courses;
        maintainCourses57.courses = courseList70;
        java.lang.String str72 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses74 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList75 = maintainCourses74.courses;
        java.util.ArrayList<course.Course> courseList76 = maintainCourses74.courses;
        maintainCourses73.courses = courseList76;
        java.util.ArrayList<course.Course> courseList78 = maintainCourses73.courses;
        java.util.ArrayList<course.Course> courseList79 = maintainCourses73.courses;
        java.util.ArrayList<course.Course> courseList80 = maintainCourses73.courses;
        maintainCourses57.courses = courseList80;
        maintainCourses0.courses = courseList80;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList80);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test163");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "hi!";
        java.lang.Class<?> wildcardClass10 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test164");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.String str6 = maintainCourses0.path;
        java.lang.String str7 = maintainCourses0.path;
        java.lang.String str8 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass9 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test165");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses17.courses;
        maintainCourses10.courses = courseList23;
        java.lang.String str25 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList29 = maintainCourses28.courses;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses28.courses;
        maintainCourses27.courses = courseList30;
        java.lang.String str32 = maintainCourses27.path;
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses33.courses;
        maintainCourses27.courses = courseList36;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        java.util.ArrayList<course.Course> courseList44 = maintainCourses38.courses;
        maintainCourses27.courses = courseList44;
        maintaining.MaintainCourses maintainCourses46 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList47 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses46.courses;
        java.lang.String str50 = maintainCourses46.path;
        maintaining.MaintainCourses maintainCourses51 = new maintaining.MaintainCourses();
        course.Course[] courseArray52 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList53 = new java.util.ArrayList<course.Course>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList53, courseArray52);
        maintainCourses51.courses = courseList53;
        maintainCourses46.courses = courseList53;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintainCourses46.courses = courseList64;
        maintainCourses27.courses = courseList64;
        maintainCourses10.courses = courseList64;
        maintainCourses0.courses = courseList64;
        java.util.ArrayList<course.Course> courseList72 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList73 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList73);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test166");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses0.courses;
        maintainCourses0.path = "";
        java.lang.String str14 = maintainCourses0.path;
        java.lang.String str15 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        java.lang.String str18 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "hi!" + "'", str18.equals("hi!"));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test167");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        java.lang.String str4 = maintainCourses0.path;
        java.lang.String str5 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test168");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        java.lang.String str35 = maintainCourses0.path;
        java.lang.String str36 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test169");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        java.lang.String str5 = maintainCourses0.path;
        java.lang.String str6 = maintainCourses0.path;
        java.lang.String str7 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test170");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList16 = maintainCourses15.courses;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses15.courses;
        maintainCourses14.courses = courseList17;
        maintainCourses0.courses = courseList17;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test171");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses8.courses;
        java.lang.String str12 = maintainCourses8.path;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        course.Course[] courseArray14 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList15 = new java.util.ArrayList<course.Course>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList15, courseArray14);
        maintainCourses13.courses = courseList15;
        maintainCourses8.courses = courseList15;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintainCourses8.courses = courseList26;
        maintainCourses0.courses = courseList26;
        java.lang.String str32 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass33 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "" + "'", str32.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test172");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        java.lang.String str35 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "hi!";
        java.lang.String str40 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "hi!" + "'", str40.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test173");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses7.courses;
        maintainCourses6.courses = courseList9;
        java.lang.String str11 = maintainCourses6.path;
        maintainCourses6.path = "";
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses14.courses;
        java.lang.String str18 = maintainCourses14.path;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        course.Course[] courseArray20 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList21 = new java.util.ArrayList<course.Course>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList21, courseArray20);
        maintainCourses19.courses = courseList21;
        maintainCourses14.courses = courseList21;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList26 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses25.courses;
        java.lang.String str29 = maintainCourses25.path;
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        course.Course[] courseArray31 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList32 = new java.util.ArrayList<course.Course>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList32, courseArray31);
        maintainCourses30.courses = courseList32;
        maintainCourses25.courses = courseList32;
        maintainCourses14.courses = courseList32;
        maintainCourses6.courses = courseList32;
        maintainCourses0.courses = courseList32;
        java.lang.String str39 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList40 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test174");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList15 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test175");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test176");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses0.courses = courseList6;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test177");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        java.lang.String str6 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses7.courses;
        maintainCourses7.path = "";
        maintainCourses7.path = "hi!";
        java.util.ArrayList<course.Course> courseList14 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses7.courses;
        maintainCourses0.courses = courseList15;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test178");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.String str17 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        maintainCourses20.path = "";
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList27 = maintainCourses26.courses;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses26.courses;
        maintainCourses25.courses = courseList28;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses25.courses;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.lang.String str37 = maintainCourses32.path;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintainCourses25.courses = courseList38;
        java.lang.String str40 = maintainCourses25.path;
        maintainCourses25.path = "hi!";
        maintaining.MaintainCourses maintainCourses43 = new maintaining.MaintainCourses();
        course.Course[] courseArray44 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList45 = new java.util.ArrayList<course.Course>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList45, courseArray44);
        maintainCourses43.courses = courseList45;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses43.courses;
        maintainCourses25.courses = courseList48;
        maintainCourses20.courses = courseList48;
        maintainCourses0.courses = courseList48;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test179");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.String str17 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.lang.String str20 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList22 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses21.courses;
        java.lang.String str25 = maintainCourses21.path;
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        course.Course[] courseArray27 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList28 = new java.util.ArrayList<course.Course>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList28, courseArray27);
        maintainCourses26.courses = courseList28;
        maintainCourses21.courses = courseList28;
        maintainCourses21.path = "hi!";
        java.util.ArrayList<course.Course> courseList34 = maintainCourses21.courses;
        maintainCourses0.courses = courseList34;
        java.lang.String str36 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "" + "'", str20.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "" + "'", str36.equals(""));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test180");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test181");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        course.Course[] courseArray4 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList5 = new java.util.ArrayList<course.Course>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList5, courseArray4);
        maintainCourses3.courses = courseList5;
        maintainCourses0.courses = courseList5;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test182");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList11 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses10.courses;
        maintainCourses9.courses = courseList12;
        java.lang.String str14 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList16 = maintainCourses15.courses;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses15.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses15.courses;
        maintainCourses9.courses = courseList18;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList22 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses21.courses;
        maintainCourses20.courses = courseList23;
        java.lang.String str25 = maintainCourses20.path;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses20.courses;
        maintainCourses9.courses = courseList26;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses9.courses;
        maintainCourses0.courses = courseList28;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test183");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test184");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList10 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test185");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList7 = null;
        maintainCourses0.courses = courseList7;
        java.lang.String str9 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test186");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        java.lang.String str14 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses0.courses;
        maintainCourses0.path = "";
        java.lang.String str18 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass19 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test187");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList4 = maintainCourses3.courses;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses3.courses;
        maintainCourses2.courses = courseList5;
        java.util.ArrayList<course.Course> courseList7 = maintainCourses2.courses;
        course.Course[] courseArray8 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList9 = new java.util.ArrayList<course.Course>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList9, courseArray8);
        maintainCourses2.courses = courseList9;
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        course.Course[] courseArray13 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList14 = new java.util.ArrayList<course.Course>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList14, courseArray13);
        maintainCourses12.courses = courseList14;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintainCourses17.path = "";
        java.util.ArrayList<course.Course> courseList20 = maintainCourses17.courses;
        maintainCourses12.courses = courseList20;
        maintainCourses2.courses = courseList20;
        maintainCourses0.courses = courseList20;
        java.lang.String str24 = maintainCourses0.path;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test188");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.String str6 = maintainCourses0.path;
        java.lang.String str7 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList11 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses10.courses;
        java.lang.String str14 = maintainCourses10.path;
        maintainCourses10.path = "";
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        maintainCourses10.courses = courseList18;
        maintainCourses10.path = "";
        maintaining.MaintainCourses maintainCourses22 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList25 = maintainCourses24.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses24.courses;
        maintainCourses23.courses = courseList26;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses23.courses;
        course.Course[] courseArray29 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList30 = new java.util.ArrayList<course.Course>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList30, courseArray29);
        maintainCourses23.courses = courseList30;
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        course.Course[] courseArray34 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList35 = new java.util.ArrayList<course.Course>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList35, courseArray34);
        maintainCourses33.courses = courseList35;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintainCourses38.path = "";
        java.util.ArrayList<course.Course> courseList41 = maintainCourses38.courses;
        maintainCourses33.courses = courseList41;
        maintainCourses23.courses = courseList41;
        maintaining.MaintainCourses maintainCourses44 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList45 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList47 = maintainCourses44.courses;
        java.lang.String str48 = maintainCourses44.path;
        maintainCourses44.path = "";
        maintaining.MaintainCourses maintainCourses51 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList52 = maintainCourses51.courses;
        maintainCourses44.courses = courseList52;
        maintainCourses23.courses = courseList52;
        maintainCourses22.courses = courseList52;
        java.util.ArrayList<course.Course> courseList56 = maintainCourses22.courses;
        maintainCourses10.courses = courseList56;
        maintaining.MaintainCourses maintainCourses58 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses59 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList60 = maintainCourses59.courses;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses59.courses;
        maintainCourses58.courses = courseList61;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses58.courses;
        java.util.ArrayList<course.Course> courseList64 = maintainCourses58.courses;
        java.util.ArrayList<course.Course> courseList65 = maintainCourses58.courses;
        maintainCourses10.courses = courseList65;
        maintainCourses0.courses = courseList65;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList65);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test189");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses17.courses;
        maintainCourses10.courses = courseList23;
        java.lang.String str25 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList29 = maintainCourses28.courses;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses28.courses;
        maintainCourses27.courses = courseList30;
        java.lang.String str32 = maintainCourses27.path;
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses33.courses;
        maintainCourses27.courses = courseList36;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        java.util.ArrayList<course.Course> courseList44 = maintainCourses38.courses;
        maintainCourses27.courses = courseList44;
        maintaining.MaintainCourses maintainCourses46 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList47 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses46.courses;
        java.lang.String str50 = maintainCourses46.path;
        maintaining.MaintainCourses maintainCourses51 = new maintaining.MaintainCourses();
        course.Course[] courseArray52 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList53 = new java.util.ArrayList<course.Course>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList53, courseArray52);
        maintainCourses51.courses = courseList53;
        maintainCourses46.courses = courseList53;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintainCourses46.courses = courseList64;
        maintainCourses27.courses = courseList64;
        maintainCourses10.courses = courseList64;
        maintainCourses0.courses = courseList64;
        java.util.ArrayList<course.Course> courseList72 = maintainCourses0.courses;
        java.lang.String str73 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test190");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList15 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintainCourses16.path = "hi!";
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        maintainCourses19.courses = courseList22;
        java.lang.String str24 = maintainCourses19.path;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses19.courses;
        maintainCourses16.courses = courseList25;
        maintainCourses16.path = "";
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses30.courses;
        maintainCourses29.courses = courseList32;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses29.courses;
        maintainCourses16.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses37 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList38 = maintainCourses37.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses37.courses;
        maintainCourses36.courses = courseList39;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses36.courses;
        maintainCourses16.courses = courseList41;
        maintainCourses0.courses = courseList41;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test191");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList8 = maintainCourses7.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses7.courses;
        maintainCourses6.courses = courseList9;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses6.courses;
        maintainCourses0.courses = courseList13;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList17 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses16.courses;
        maintainCourses15.courses = courseList18;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses15.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses15.courses;
        maintaining.MaintainCourses maintainCourses22 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        maintainCourses22.courses = courseList25;
        java.lang.String str27 = maintainCourses22.path;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses22.courses;
        maintainCourses15.courses = courseList28;
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses32.courses;
        course.Course[] courseArray38 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList39 = new java.util.ArrayList<course.Course>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList39, courseArray38);
        maintainCourses32.courses = courseList39;
        maintaining.MaintainCourses maintainCourses42 = new maintaining.MaintainCourses();
        course.Course[] courseArray43 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList44 = new java.util.ArrayList<course.Course>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList44, courseArray43);
        maintainCourses42.courses = courseList44;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        maintainCourses47.path = "";
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        maintainCourses42.courses = courseList50;
        maintainCourses32.courses = courseList50;
        maintainCourses30.courses = courseList50;
        maintainCourses15.courses = courseList50;
        maintainCourses15.path = "";
        java.util.ArrayList<course.Course> courseList57 = maintainCourses15.courses;
        maintainCourses0.courses = courseList57;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList57);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test192");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test193");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses23.courses;
        maintainCourses17.courses = courseList26;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses17.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        java.lang.String str51 = maintainCourses47.path;
        maintaining.MaintainCourses maintainCourses52 = new maintaining.MaintainCourses();
        course.Course[] courseArray53 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList54 = new java.util.ArrayList<course.Course>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList54, courseArray53);
        maintainCourses52.courses = courseList54;
        maintainCourses47.courses = courseList54;
        maintainCourses36.courses = courseList54;
        maintainCourses17.courses = courseList54;
        maintainCourses0.courses = courseList54;
        maintaining.MaintainCourses maintainCourses61 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList62 = maintainCourses61.courses;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses61.courses;
        java.lang.String str64 = maintainCourses61.path;
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses61.courses = courseList67;
        maintainCourses0.courses = courseList67;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test194");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        maintainCourses6.path = "";
        maintainCourses6.path = "hi!";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses6.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test195");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        java.lang.String str14 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList16 = maintainCourses15.courses;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses15.courses;
        java.lang.String str18 = maintainCourses15.path;
        maintainCourses15.path = "hi!";
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses22 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList23 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses22.courses;
        maintainCourses21.courses = courseList24;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses21.courses;
        maintainCourses15.courses = courseList28;
        maintainCourses0.courses = courseList28;
        java.lang.Class<?> wildcardClass31 = courseList28.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test196");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test197");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses23.courses;
        maintainCourses17.courses = courseList26;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses17.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        java.lang.String str51 = maintainCourses47.path;
        maintaining.MaintainCourses maintainCourses52 = new maintaining.MaintainCourses();
        course.Course[] courseArray53 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList54 = new java.util.ArrayList<course.Course>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList54, courseArray53);
        maintainCourses52.courses = courseList54;
        maintainCourses47.courses = courseList54;
        maintainCourses36.courses = courseList54;
        maintainCourses17.courses = courseList54;
        maintainCourses0.courses = courseList54;
        maintaining.MaintainCourses maintainCourses61 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList62 = maintainCourses61.courses;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses61.courses;
        java.lang.String str64 = maintainCourses61.path;
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses61.courses = courseList67;
        maintainCourses0.courses = courseList67;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList71 = maintainCourses0.courses;
        java.lang.String str72 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList73 = maintainCourses0.courses;
        java.lang.String str74 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test198");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        maintainCourses0.path = "";
        java.lang.String str18 = maintainCourses0.path;
        java.lang.String str19 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test199");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test200");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses17.courses;
        maintainCourses10.courses = courseList23;
        java.lang.String str25 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList29 = maintainCourses28.courses;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses28.courses;
        maintainCourses27.courses = courseList30;
        java.lang.String str32 = maintainCourses27.path;
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses33.courses;
        maintainCourses27.courses = courseList36;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        java.util.ArrayList<course.Course> courseList44 = maintainCourses38.courses;
        maintainCourses27.courses = courseList44;
        maintaining.MaintainCourses maintainCourses46 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList47 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses46.courses;
        java.lang.String str50 = maintainCourses46.path;
        maintaining.MaintainCourses maintainCourses51 = new maintaining.MaintainCourses();
        course.Course[] courseArray52 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList53 = new java.util.ArrayList<course.Course>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList53, courseArray52);
        maintainCourses51.courses = courseList53;
        maintainCourses46.courses = courseList53;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintainCourses46.courses = courseList64;
        maintainCourses27.courses = courseList64;
        maintainCourses10.courses = courseList64;
        maintainCourses0.courses = courseList64;
        java.util.ArrayList<course.Course> courseList72 = maintainCourses0.courses;
        java.lang.String str73 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test201");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses17.courses;
        maintainCourses10.courses = courseList23;
        java.lang.String str25 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList29 = maintainCourses28.courses;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses28.courses;
        maintainCourses27.courses = courseList30;
        java.lang.String str32 = maintainCourses27.path;
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses33.courses;
        maintainCourses27.courses = courseList36;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        java.util.ArrayList<course.Course> courseList44 = maintainCourses38.courses;
        maintainCourses27.courses = courseList44;
        maintaining.MaintainCourses maintainCourses46 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList47 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses46.courses;
        java.lang.String str50 = maintainCourses46.path;
        maintaining.MaintainCourses maintainCourses51 = new maintaining.MaintainCourses();
        course.Course[] courseArray52 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList53 = new java.util.ArrayList<course.Course>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList53, courseArray52);
        maintainCourses51.courses = courseList53;
        maintainCourses46.courses = courseList53;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintainCourses46.courses = courseList64;
        maintainCourses27.courses = courseList64;
        maintainCourses10.courses = courseList64;
        maintainCourses0.courses = courseList64;
        maintainCourses0.path = "";
        java.lang.String str74 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList75 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "" + "'", str74.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test202");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        maintainCourses16.courses = courseList19;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses16.courses;
        maintainCourses0.courses = courseList23;
        java.lang.String str25 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test203");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        java.lang.String str6 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses7.courses;
        course.Course[] courseArray13 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList14 = new java.util.ArrayList<course.Course>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList14, courseArray13);
        maintainCourses7.courses = courseList14;
        maintainCourses0.courses = courseList14;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test204");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        maintainCourses16.courses = courseList19;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses16.courses;
        maintainCourses0.courses = courseList23;
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList27 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass28 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test205");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test206");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        java.lang.String str14 = maintainCourses0.path;
        java.lang.String str15 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass16 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!" + "'", str14.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test207");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        java.lang.String str13 = maintainCourses0.path;
        java.lang.String str14 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test208");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList14 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses13.courses;
        java.lang.String str17 = maintainCourses13.path;
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        course.Course[] courseArray19 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList20 = new java.util.ArrayList<course.Course>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList20, courseArray19);
        maintainCourses18.courses = courseList20;
        maintainCourses13.courses = courseList20;
        maintainCourses13.path = "";
        maintainCourses13.path = "hi!";
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        maintainCourses28.courses = courseList37;
        maintainCourses13.courses = courseList37;
        maintainCourses0.courses = courseList37;
        maintainCourses0.path = "";
        java.lang.String str43 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "" + "'", str43.equals(""));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test209");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test210");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses17.courses;
        maintainCourses10.courses = courseList23;
        java.lang.String str25 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses10.courses;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList29 = maintainCourses28.courses;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses28.courses;
        maintainCourses27.courses = courseList30;
        java.lang.String str32 = maintainCourses27.path;
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses33.courses;
        maintainCourses27.courses = courseList36;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        java.util.ArrayList<course.Course> courseList44 = maintainCourses38.courses;
        maintainCourses27.courses = courseList44;
        maintaining.MaintainCourses maintainCourses46 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList47 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses46.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses46.courses;
        java.lang.String str50 = maintainCourses46.path;
        maintaining.MaintainCourses maintainCourses51 = new maintaining.MaintainCourses();
        course.Course[] courseArray52 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList53 = new java.util.ArrayList<course.Course>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList53, courseArray52);
        maintainCourses51.courses = courseList53;
        maintainCourses46.courses = courseList53;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintainCourses46.courses = courseList64;
        maintainCourses27.courses = courseList64;
        maintainCourses10.courses = courseList64;
        maintainCourses0.courses = courseList64;
        java.util.ArrayList<course.Course> courseList72 = maintainCourses0.courses;
        java.lang.String str73 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList74 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass75 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test211");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.String str6 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintainCourses7.path = "hi!";
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.lang.String str15 = maintainCourses10.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        maintainCourses7.courses = courseList16;
        maintainCourses0.courses = courseList16;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test212");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass9 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test213");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList14 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses13.courses;
        maintainCourses12.courses = courseList15;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses12.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses12.courses;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        maintainCourses19.courses = courseList22;
        java.lang.String str24 = maintainCourses19.path;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses19.courses;
        maintainCourses12.courses = courseList25;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList28 = maintainCourses27.courses;
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses30.courses;
        maintainCourses29.courses = courseList32;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses29.courses;
        course.Course[] courseArray35 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList36 = new java.util.ArrayList<course.Course>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList36, courseArray35);
        maintainCourses29.courses = courseList36;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        course.Course[] courseArray40 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList41 = new java.util.ArrayList<course.Course>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList41, courseArray40);
        maintainCourses39.courses = courseList41;
        maintaining.MaintainCourses maintainCourses44 = new maintaining.MaintainCourses();
        maintainCourses44.path = "";
        java.util.ArrayList<course.Course> courseList47 = maintainCourses44.courses;
        maintainCourses39.courses = courseList47;
        maintainCourses29.courses = courseList47;
        maintainCourses27.courses = courseList47;
        maintainCourses12.courses = courseList47;
        maintainCourses0.courses = courseList47;
        maintaining.MaintainCourses maintainCourses53 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses54 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList55 = maintainCourses54.courses;
        java.util.ArrayList<course.Course> courseList56 = maintainCourses54.courses;
        maintainCourses53.courses = courseList56;
        java.lang.String str58 = maintainCourses53.path;
        maintaining.MaintainCourses maintainCourses59 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList60 = maintainCourses59.courses;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses59.courses;
        java.util.ArrayList<course.Course> courseList62 = maintainCourses59.courses;
        maintainCourses53.courses = courseList62;
        maintaining.MaintainCourses maintainCourses64 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses64.courses = courseList67;
        java.lang.String str69 = maintainCourses64.path;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses64.courses;
        maintainCourses53.courses = courseList70;
        maintainCourses0.courses = courseList70;
        java.util.ArrayList<course.Course> courseList73 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList73);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test214");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList16 = maintainCourses15.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses17.courses;
        course.Course[] courseArray23 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList24 = new java.util.ArrayList<course.Course>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList24, courseArray23);
        maintainCourses17.courses = courseList24;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        course.Course[] courseArray28 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList29 = new java.util.ArrayList<course.Course>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList29, courseArray28);
        maintainCourses27.courses = courseList29;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintainCourses32.path = "";
        java.util.ArrayList<course.Course> courseList35 = maintainCourses32.courses;
        maintainCourses27.courses = courseList35;
        maintainCourses17.courses = courseList35;
        maintainCourses15.courses = courseList35;
        maintainCourses0.courses = courseList35;
        java.lang.String str40 = maintainCourses0.path;
        java.lang.String str41 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test215");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        java.lang.String str15 = maintainCourses11.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        course.Course[] courseArray17 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList18 = new java.util.ArrayList<course.Course>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList18, courseArray17);
        maintainCourses16.courses = courseList18;
        maintainCourses11.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        maintainCourses23.path = "";
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        course.Course[] courseArray27 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList28 = new java.util.ArrayList<course.Course>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList28, courseArray27);
        maintainCourses26.courses = courseList28;
        maintainCourses23.courses = courseList28;
        maintainCourses0.courses = courseList28;
        java.lang.String str33 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        maintainCourses34.path = "hi!";
        maintaining.MaintainCourses maintainCourses37 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList39 = maintainCourses38.courses;
        java.util.ArrayList<course.Course> courseList40 = maintainCourses38.courses;
        maintainCourses37.courses = courseList40;
        java.lang.String str42 = maintainCourses37.path;
        java.util.ArrayList<course.Course> courseList43 = maintainCourses37.courses;
        maintainCourses34.courses = courseList43;
        maintainCourses0.courses = courseList43;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList43);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test216");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        maintainCourses0.path = "";
        java.lang.String str13 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test217");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        course.Course[] courseArray19 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList20 = new java.util.ArrayList<course.Course>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList20, courseArray19);
        maintainCourses18.courses = courseList20;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses18.courses;
        maintainCourses0.courses = courseList23;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList28 = maintainCourses27.courses;
        java.util.ArrayList<course.Course> courseList29 = maintainCourses27.courses;
        maintainCourses26.courses = courseList29;
        java.lang.String str31 = maintainCourses26.path;
        maintainCourses26.path = "";
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        java.lang.String str38 = maintainCourses34.path;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        course.Course[] courseArray40 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList41 = new java.util.ArrayList<course.Course>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList41, courseArray40);
        maintainCourses39.courses = courseList41;
        maintainCourses34.courses = courseList41;
        maintaining.MaintainCourses maintainCourses45 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList46 = maintainCourses45.courses;
        java.util.ArrayList<course.Course> courseList47 = maintainCourses45.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses45.courses;
        java.lang.String str49 = maintainCourses45.path;
        maintaining.MaintainCourses maintainCourses50 = new maintaining.MaintainCourses();
        course.Course[] courseArray51 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList52 = new java.util.ArrayList<course.Course>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList52, courseArray51);
        maintainCourses50.courses = courseList52;
        maintainCourses45.courses = courseList52;
        maintainCourses34.courses = courseList52;
        maintainCourses26.courses = courseList52;
        maintainCourses25.courses = courseList52;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses25.courses;
        java.lang.String str60 = maintainCourses25.path;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses25.courses;
        maintainCourses0.courses = courseList61;
        java.lang.String str63 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "hi!" + "'", str63.equals("hi!"));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test218");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test219");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        maintainCourses5.courses = courseList8;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses5.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses5.courses;
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList14 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses13.courses;
        maintainCourses12.courses = courseList15;
        java.lang.String str17 = maintainCourses12.path;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses12.courses;
        maintainCourses5.courses = courseList18;
        java.lang.String str20 = maintainCourses5.path;
        maintainCourses5.path = "hi!";
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        course.Course[] courseArray24 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList25 = new java.util.ArrayList<course.Course>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList25, courseArray24);
        maintainCourses23.courses = courseList25;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses23.courses;
        maintainCourses5.courses = courseList28;
        maintainCourses0.courses = courseList28;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test220");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        course.Course[] courseArray11 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList12 = new java.util.ArrayList<course.Course>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList12, courseArray11);
        maintainCourses10.courses = courseList12;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintainCourses15.path = "";
        java.util.ArrayList<course.Course> courseList18 = maintainCourses15.courses;
        maintainCourses10.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses22 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList23 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses22.courses;
        maintainCourses21.courses = courseList24;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses21.courses;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses21.courses = courseList34;
        java.lang.String str36 = maintainCourses21.path;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses21.courses;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        maintaining.MaintainCourses maintainCourses44 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList45 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList47 = maintainCourses44.courses;
        maintainCourses38.courses = courseList47;
        maintaining.MaintainCourses maintainCourses49 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses50 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList51 = maintainCourses50.courses;
        java.util.ArrayList<course.Course> courseList52 = maintainCourses50.courses;
        maintainCourses49.courses = courseList52;
        java.lang.String str54 = maintainCourses49.path;
        java.util.ArrayList<course.Course> courseList55 = maintainCourses49.courses;
        maintainCourses38.courses = courseList55;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintaining.MaintainCourses maintainCourses68 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList69 = maintainCourses68.courses;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses68.courses;
        java.util.ArrayList<course.Course> courseList71 = maintainCourses68.courses;
        java.lang.String str72 = maintainCourses68.path;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        course.Course[] courseArray74 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList75 = new java.util.ArrayList<course.Course>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList75, courseArray74);
        maintainCourses73.courses = courseList75;
        maintainCourses68.courses = courseList75;
        maintainCourses57.courses = courseList75;
        maintainCourses38.courses = courseList75;
        maintainCourses21.courses = courseList75;
        maintainCourses0.courses = courseList75;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test221");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.lang.String str6 = maintainCourses0.path;
        java.lang.String str7 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test222");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses3.courses;
        java.lang.String str9 = maintainCourses3.path;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintainCourses10.path = "hi!";
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        maintainCourses13.courses = courseList16;
        java.lang.String str18 = maintainCourses13.path;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses13.courses;
        maintainCourses10.courses = courseList19;
        maintainCourses3.courses = courseList19;
        maintainCourses0.courses = courseList19;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test223");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        maintainCourses5.path = "";
        java.util.ArrayList<course.Course> courseList8 = maintainCourses5.courses;
        maintainCourses0.courses = courseList8;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList11 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses10.courses;
        java.lang.String str14 = maintainCourses10.path;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        course.Course[] courseArray16 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList17 = new java.util.ArrayList<course.Course>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList17, courseArray16);
        maintainCourses15.courses = courseList17;
        maintainCourses10.courses = courseList17;
        maintainCourses10.path = "hi!";
        java.util.ArrayList<course.Course> courseList23 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses10.courses;
        maintainCourses0.courses = courseList24;
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        course.Course[] courseArray27 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList28 = new java.util.ArrayList<course.Course>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList28, courseArray27);
        maintainCourses26.courses = courseList28;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses26.courses;
        maintainCourses26.path = "";
        maintainCourses26.path = "";
        java.util.ArrayList<course.Course> courseList36 = maintainCourses26.courses;
        maintainCourses0.courses = courseList36;
        java.lang.String str38 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test224");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        course.Course[] courseArray11 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList12 = new java.util.ArrayList<course.Course>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList12, courseArray11);
        maintainCourses10.courses = courseList12;
        maintaining.MaintainCourses maintainCourses15 = new maintaining.MaintainCourses();
        maintainCourses15.path = "";
        java.util.ArrayList<course.Course> courseList18 = maintainCourses15.courses;
        maintainCourses10.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses22 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList23 = maintainCourses22.courses;
        java.util.ArrayList<course.Course> courseList24 = maintainCourses22.courses;
        maintainCourses21.courses = courseList24;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses21.courses;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses21.courses = courseList34;
        java.lang.String str36 = maintainCourses21.path;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses21.courses;
        maintaining.MaintainCourses maintainCourses38 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList40 = maintainCourses39.courses;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses39.courses;
        maintainCourses38.courses = courseList41;
        java.lang.String str43 = maintainCourses38.path;
        maintaining.MaintainCourses maintainCourses44 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList45 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList46 = maintainCourses44.courses;
        java.util.ArrayList<course.Course> courseList47 = maintainCourses44.courses;
        maintainCourses38.courses = courseList47;
        maintaining.MaintainCourses maintainCourses49 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses50 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList51 = maintainCourses50.courses;
        java.util.ArrayList<course.Course> courseList52 = maintainCourses50.courses;
        maintainCourses49.courses = courseList52;
        java.lang.String str54 = maintainCourses49.path;
        java.util.ArrayList<course.Course> courseList55 = maintainCourses49.courses;
        maintainCourses38.courses = courseList55;
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList60 = maintainCourses57.courses;
        java.lang.String str61 = maintainCourses57.path;
        maintaining.MaintainCourses maintainCourses62 = new maintaining.MaintainCourses();
        course.Course[] courseArray63 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList64 = new java.util.ArrayList<course.Course>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList64, courseArray63);
        maintainCourses62.courses = courseList64;
        maintainCourses57.courses = courseList64;
        maintaining.MaintainCourses maintainCourses68 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList69 = maintainCourses68.courses;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses68.courses;
        java.util.ArrayList<course.Course> courseList71 = maintainCourses68.courses;
        java.lang.String str72 = maintainCourses68.path;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        course.Course[] courseArray74 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList75 = new java.util.ArrayList<course.Course>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList75, courseArray74);
        maintainCourses73.courses = courseList75;
        maintainCourses68.courses = courseList75;
        maintainCourses57.courses = courseList75;
        maintainCourses38.courses = courseList75;
        maintainCourses21.courses = courseList75;
        maintainCourses0.courses = courseList75;
        java.lang.String str83 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        java.lang.String str90 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str90 + "' != '" + "" + "'", str90.equals(""));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test225");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintainCourses0.path = "";
        java.lang.Class<?> wildcardClass5 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test226");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList7 = maintainCourses0.courses;
        java.lang.Class<?> wildcardClass8 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test227");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        java.lang.String str5 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass6 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test228");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList13 = maintainCourses12.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses12.courses;
        maintainCourses11.courses = courseList14;
        java.lang.String str16 = maintainCourses11.path;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses11.courses;
        maintainCourses0.courses = courseList17;
        java.lang.String str19 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test229");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        java.lang.String str17 = maintainCourses14.path;
        maintainCourses14.path = "hi!";
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses21 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList22 = maintainCourses21.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses21.courses;
        maintainCourses20.courses = courseList23;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses20.courses;
        maintainCourses14.courses = courseList27;
        maintainCourses0.courses = courseList27;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test230");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        maintainCourses16.courses = courseList19;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses16.courses;
        maintainCourses0.courses = courseList23;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test231");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses2 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList3 = maintainCourses2.courses;
        java.util.ArrayList<course.Course> courseList4 = maintainCourses2.courses;
        maintainCourses1.courses = courseList4;
        java.lang.String str6 = maintainCourses1.path;
        maintainCourses1.path = "";
        maintaining.MaintainCourses maintainCourses9 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList10 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses9.courses;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses9.courses;
        java.lang.String str13 = maintainCourses9.path;
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        course.Course[] courseArray15 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList16 = new java.util.ArrayList<course.Course>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList16, courseArray15);
        maintainCourses14.courses = courseList16;
        maintainCourses9.courses = courseList16;
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses20.courses;
        java.lang.String str24 = maintainCourses20.path;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        course.Course[] courseArray26 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList27 = new java.util.ArrayList<course.Course>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList27, courseArray26);
        maintainCourses25.courses = courseList27;
        maintainCourses20.courses = courseList27;
        maintainCourses9.courses = courseList27;
        maintainCourses1.courses = courseList27;
        maintainCourses0.courses = courseList27;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses0.courses;
        java.lang.String str35 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        java.lang.Class<?> wildcardClass38 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test232");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses23.courses;
        maintainCourses17.courses = courseList26;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses17.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        java.lang.String str51 = maintainCourses47.path;
        maintaining.MaintainCourses maintainCourses52 = new maintaining.MaintainCourses();
        course.Course[] courseArray53 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList54 = new java.util.ArrayList<course.Course>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList54, courseArray53);
        maintainCourses52.courses = courseList54;
        maintainCourses47.courses = courseList54;
        maintainCourses36.courses = courseList54;
        maintainCourses17.courses = courseList54;
        maintainCourses0.courses = courseList54;
        maintaining.MaintainCourses maintainCourses61 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList62 = maintainCourses61.courses;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses61.courses;
        java.lang.String str64 = maintainCourses61.path;
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses61.courses = courseList67;
        maintainCourses0.courses = courseList67;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList72 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test233");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        maintainCourses0.courses = courseList14;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        java.lang.String str17 = maintainCourses0.path;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList20 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test234");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList14 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses13.courses;
        maintainCourses12.courses = courseList15;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses12.courses;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses12.courses;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses20 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList21 = maintainCourses20.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses20.courses;
        maintainCourses19.courses = courseList22;
        java.lang.String str24 = maintainCourses19.path;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses19.courses;
        maintainCourses12.courses = courseList25;
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList28 = maintainCourses27.courses;
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses30 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList31 = maintainCourses30.courses;
        java.util.ArrayList<course.Course> courseList32 = maintainCourses30.courses;
        maintainCourses29.courses = courseList32;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses29.courses;
        course.Course[] courseArray35 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList36 = new java.util.ArrayList<course.Course>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList36, courseArray35);
        maintainCourses29.courses = courseList36;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        course.Course[] courseArray40 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList41 = new java.util.ArrayList<course.Course>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList41, courseArray40);
        maintainCourses39.courses = courseList41;
        maintaining.MaintainCourses maintainCourses44 = new maintaining.MaintainCourses();
        maintainCourses44.path = "";
        java.util.ArrayList<course.Course> courseList47 = maintainCourses44.courses;
        maintainCourses39.courses = courseList47;
        maintainCourses29.courses = courseList47;
        maintainCourses27.courses = courseList47;
        maintainCourses12.courses = courseList47;
        maintainCourses0.courses = courseList47;
        java.lang.String str53 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass54 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test235");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        java.lang.String str7 = maintainCourses4.path;
        maintainCourses4.path = "hi!";
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        maintainCourses10.courses = courseList13;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses10.courses;
        java.util.ArrayList<course.Course> courseList17 = maintainCourses10.courses;
        maintainCourses4.courses = courseList17;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses4.courses;
        maintainCourses0.courses = courseList19;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test236");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses3.courses;
        java.lang.String str9 = maintainCourses3.path;
        maintaining.MaintainCourses maintainCourses10 = new maintaining.MaintainCourses();
        maintainCourses10.path = "hi!";
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses14 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList15 = maintainCourses14.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses14.courses;
        maintainCourses13.courses = courseList16;
        java.lang.String str18 = maintainCourses13.path;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses13.courses;
        maintainCourses10.courses = courseList19;
        maintainCourses3.courses = courseList19;
        maintainCourses0.courses = courseList19;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList27 = maintainCourses26.courses;
        java.util.ArrayList<course.Course> courseList28 = maintainCourses26.courses;
        maintainCourses25.courses = courseList28;
        java.util.ArrayList<course.Course> courseList30 = maintainCourses25.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses25.courses;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.lang.String str37 = maintainCourses32.path;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintainCourses25.courses = courseList38;
        java.lang.String str40 = maintainCourses25.path;
        java.util.ArrayList<course.Course> courseList41 = maintainCourses25.courses;
        maintaining.MaintainCourses maintainCourses42 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses43 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList44 = maintainCourses43.courses;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses43.courses;
        maintainCourses42.courses = courseList45;
        java.lang.String str47 = maintainCourses42.path;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses42.courses;
        maintainCourses25.courses = courseList48;
        maintainCourses0.courses = courseList48;
        java.lang.Class<?> wildcardClass51 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test237");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.lang.Class<?> wildcardClass16 = maintainCourses0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test238");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses12 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList14 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses13.courses;
        maintainCourses12.courses = courseList15;
        java.lang.String str17 = maintainCourses12.path;
        java.util.ArrayList<course.Course> courseList18 = maintainCourses12.courses;
        maintainCourses0.courses = courseList18;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test239");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList18 = maintainCourses17.courses;
        java.util.ArrayList<course.Course> courseList19 = maintainCourses17.courses;
        maintainCourses16.courses = courseList19;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses16.courses;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses16.courses;
        maintainCourses0.courses = courseList23;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList27 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList27);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test240");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList7 = null;
        maintainCourses0.courses = courseList7;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(courseList9);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test241");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.lang.String str7 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!" + "'", str7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test242");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        course.Course[] courseArray19 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList20 = new java.util.ArrayList<course.Course>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList20, courseArray19);
        maintainCourses18.courses = courseList20;
        java.util.ArrayList<course.Course> courseList23 = maintainCourses18.courses;
        maintainCourses0.courses = courseList23;
        maintaining.MaintainCourses maintainCourses25 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses27 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList28 = maintainCourses27.courses;
        java.util.ArrayList<course.Course> courseList29 = maintainCourses27.courses;
        maintainCourses26.courses = courseList29;
        java.lang.String str31 = maintainCourses26.path;
        maintainCourses26.path = "";
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        java.lang.String str38 = maintainCourses34.path;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        course.Course[] courseArray40 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList41 = new java.util.ArrayList<course.Course>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList41, courseArray40);
        maintainCourses39.courses = courseList41;
        maintainCourses34.courses = courseList41;
        maintaining.MaintainCourses maintainCourses45 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList46 = maintainCourses45.courses;
        java.util.ArrayList<course.Course> courseList47 = maintainCourses45.courses;
        java.util.ArrayList<course.Course> courseList48 = maintainCourses45.courses;
        java.lang.String str49 = maintainCourses45.path;
        maintaining.MaintainCourses maintainCourses50 = new maintaining.MaintainCourses();
        course.Course[] courseArray51 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList52 = new java.util.ArrayList<course.Course>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList52, courseArray51);
        maintainCourses50.courses = courseList52;
        maintainCourses45.courses = courseList52;
        maintainCourses34.courses = courseList52;
        maintainCourses26.courses = courseList52;
        maintainCourses25.courses = courseList52;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses25.courses;
        java.lang.String str60 = maintainCourses25.path;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses25.courses;
        maintainCourses0.courses = courseList61;
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList65 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList65);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test243");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses7 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        maintainCourses7.courses = courseList10;
        java.lang.String str12 = maintainCourses7.path;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses7.courses;
        maintainCourses0.courses = courseList13;
        java.lang.String str15 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses17 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList19 = maintainCourses18.courses;
        java.util.ArrayList<course.Course> courseList20 = maintainCourses18.courses;
        maintainCourses17.courses = courseList20;
        java.lang.String str22 = maintainCourses17.path;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList24 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList25 = maintainCourses23.courses;
        java.util.ArrayList<course.Course> courseList26 = maintainCourses23.courses;
        maintainCourses17.courses = courseList26;
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        java.util.ArrayList<course.Course> courseList34 = maintainCourses28.courses;
        maintainCourses17.courses = courseList34;
        maintaining.MaintainCourses maintainCourses36 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList37 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses36.courses;
        java.util.ArrayList<course.Course> courseList39 = maintainCourses36.courses;
        java.lang.String str40 = maintainCourses36.path;
        maintaining.MaintainCourses maintainCourses41 = new maintaining.MaintainCourses();
        course.Course[] courseArray42 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList43 = new java.util.ArrayList<course.Course>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList43, courseArray42);
        maintainCourses41.courses = courseList43;
        maintainCourses36.courses = courseList43;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses47.courses;
        java.lang.String str51 = maintainCourses47.path;
        maintaining.MaintainCourses maintainCourses52 = new maintaining.MaintainCourses();
        course.Course[] courseArray53 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList54 = new java.util.ArrayList<course.Course>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList54, courseArray53);
        maintainCourses52.courses = courseList54;
        maintainCourses47.courses = courseList54;
        maintainCourses36.courses = courseList54;
        maintainCourses17.courses = courseList54;
        maintainCourses0.courses = courseList54;
        maintaining.MaintainCourses maintainCourses61 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList62 = maintainCourses61.courses;
        java.util.ArrayList<course.Course> courseList63 = maintainCourses61.courses;
        java.lang.String str64 = maintainCourses61.path;
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        maintainCourses61.courses = courseList67;
        maintainCourses0.courses = courseList67;
        java.util.ArrayList<course.Course> courseList70 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList71 = maintainCourses0.courses;
        java.lang.String str72 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList73 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList74 = maintainCourses0.courses;
        java.lang.String str75 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test244");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        maintainCourses0.path = "hi!";
        java.lang.String str13 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test245");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses3 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses3.courses = courseList6;
        java.lang.String str8 = maintainCourses3.path;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses3.courses;
        maintainCourses0.courses = courseList9;
        maintainCourses0.path = "";
        java.lang.String str13 = maintainCourses0.path;
        maintainCourses0.path = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test246");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        java.lang.String str12 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test247");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList14 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses13.courses;
        java.lang.String str17 = maintainCourses13.path;
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        course.Course[] courseArray19 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList20 = new java.util.ArrayList<course.Course>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList20, courseArray19);
        maintainCourses18.courses = courseList20;
        maintainCourses13.courses = courseList20;
        maintainCourses13.path = "";
        maintainCourses13.path = "hi!";
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        maintainCourses28.courses = courseList37;
        maintainCourses13.courses = courseList37;
        maintainCourses0.courses = courseList37;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        maintaining.MaintainCourses maintainCourses45 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses46 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList48 = maintainCourses47.courses;
        java.util.ArrayList<course.Course> courseList49 = maintainCourses47.courses;
        maintainCourses46.courses = courseList49;
        java.lang.String str51 = maintainCourses46.path;
        maintainCourses46.path = "";
        maintaining.MaintainCourses maintainCourses54 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList55 = maintainCourses54.courses;
        java.util.ArrayList<course.Course> courseList56 = maintainCourses54.courses;
        java.util.ArrayList<course.Course> courseList57 = maintainCourses54.courses;
        java.lang.String str58 = maintainCourses54.path;
        maintaining.MaintainCourses maintainCourses59 = new maintaining.MaintainCourses();
        course.Course[] courseArray60 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList61 = new java.util.ArrayList<course.Course>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList61, courseArray60);
        maintainCourses59.courses = courseList61;
        maintainCourses54.courses = courseList61;
        maintaining.MaintainCourses maintainCourses65 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList66 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList67 = maintainCourses65.courses;
        java.util.ArrayList<course.Course> courseList68 = maintainCourses65.courses;
        java.lang.String str69 = maintainCourses65.path;
        maintaining.MaintainCourses maintainCourses70 = new maintaining.MaintainCourses();
        course.Course[] courseArray71 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList72 = new java.util.ArrayList<course.Course>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList72, courseArray71);
        maintainCourses70.courses = courseList72;
        maintainCourses65.courses = courseList72;
        maintainCourses54.courses = courseList72;
        maintainCourses46.courses = courseList72;
        maintainCourses45.courses = courseList72;
        java.util.ArrayList<course.Course> courseList79 = maintainCourses45.courses;
        java.lang.String str80 = maintainCourses45.path;
        java.util.ArrayList<course.Course> courseList81 = maintainCourses45.courses;
        maintainCourses0.courses = courseList81;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList81);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test248");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        java.lang.String str14 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses0.courses;
        java.lang.String str16 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test249");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses8.courses;
        java.lang.String str12 = maintainCourses8.path;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        course.Course[] courseArray14 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList15 = new java.util.ArrayList<course.Course>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList15, courseArray14);
        maintainCourses13.courses = courseList15;
        maintainCourses8.courses = courseList15;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintainCourses8.courses = courseList26;
        maintainCourses0.courses = courseList26;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses32.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        maintainCourses39.courses = courseList42;
        java.lang.String str44 = maintainCourses39.path;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses39.courses;
        maintainCourses32.courses = courseList45;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList49 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses48.courses;
        maintainCourses47.courses = courseList50;
        java.lang.String str52 = maintainCourses47.path;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses47.courses;
        maintainCourses32.courses = courseList53;
        maintainCourses0.courses = courseList53;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList58 = null;
        maintainCourses0.courses = courseList58;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test250");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintaining.MaintainCourses maintainCourses11 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList12 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses11.courses;
        java.util.ArrayList<course.Course> courseList14 = maintainCourses11.courses;
        java.lang.String str15 = maintainCourses11.path;
        maintaining.MaintainCourses maintainCourses16 = new maintaining.MaintainCourses();
        course.Course[] courseArray17 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList18 = new java.util.ArrayList<course.Course>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList18, courseArray17);
        maintainCourses16.courses = courseList18;
        maintainCourses11.courses = courseList18;
        maintainCourses0.courses = courseList18;
        maintaining.MaintainCourses maintainCourses23 = new maintaining.MaintainCourses();
        maintainCourses23.path = "";
        maintaining.MaintainCourses maintainCourses26 = new maintaining.MaintainCourses();
        course.Course[] courseArray27 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList28 = new java.util.ArrayList<course.Course>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList28, courseArray27);
        maintainCourses26.courses = courseList28;
        maintainCourses23.courses = courseList28;
        maintainCourses0.courses = courseList28;
        java.lang.String str33 = maintainCourses0.path;
        java.lang.String str34 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test251");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses0.courses;
        java.lang.String str4 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses5 = new maintaining.MaintainCourses();
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses5.courses = courseList7;
        maintainCourses0.courses = courseList7;
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.lang.String str15 = maintainCourses0.path;
        java.lang.String str16 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!" + "'", str16.equals("hi!"));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test252");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintainCourses0.path = "";
        maintaining.MaintainCourses maintainCourses8 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList9 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList10 = maintainCourses8.courses;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses8.courses;
        java.lang.String str12 = maintainCourses8.path;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        course.Course[] courseArray14 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList15 = new java.util.ArrayList<course.Course>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList15, courseArray14);
        maintainCourses13.courses = courseList15;
        maintainCourses8.courses = courseList15;
        maintaining.MaintainCourses maintainCourses19 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList20 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList21 = maintainCourses19.courses;
        java.util.ArrayList<course.Course> courseList22 = maintainCourses19.courses;
        java.lang.String str23 = maintainCourses19.path;
        maintaining.MaintainCourses maintainCourses24 = new maintaining.MaintainCourses();
        course.Course[] courseArray25 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList26 = new java.util.ArrayList<course.Course>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList26, courseArray25);
        maintainCourses24.courses = courseList26;
        maintainCourses19.courses = courseList26;
        maintainCourses8.courses = courseList26;
        maintainCourses0.courses = courseList26;
        maintaining.MaintainCourses maintainCourses32 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses33 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList34 = maintainCourses33.courses;
        java.util.ArrayList<course.Course> courseList35 = maintainCourses33.courses;
        maintainCourses32.courses = courseList35;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses32.courses;
        java.util.ArrayList<course.Course> courseList38 = maintainCourses32.courses;
        maintaining.MaintainCourses maintainCourses39 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses40 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList41 = maintainCourses40.courses;
        java.util.ArrayList<course.Course> courseList42 = maintainCourses40.courses;
        maintainCourses39.courses = courseList42;
        java.lang.String str44 = maintainCourses39.path;
        java.util.ArrayList<course.Course> courseList45 = maintainCourses39.courses;
        maintainCourses32.courses = courseList45;
        maintaining.MaintainCourses maintainCourses47 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses48 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList49 = maintainCourses48.courses;
        java.util.ArrayList<course.Course> courseList50 = maintainCourses48.courses;
        maintainCourses47.courses = courseList50;
        java.lang.String str52 = maintainCourses47.path;
        java.util.ArrayList<course.Course> courseList53 = maintainCourses47.courses;
        maintainCourses32.courses = courseList53;
        maintainCourses0.courses = courseList53;
        maintaining.MaintainCourses maintainCourses56 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses57 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList58 = maintainCourses57.courses;
        java.util.ArrayList<course.Course> courseList59 = maintainCourses57.courses;
        maintainCourses56.courses = courseList59;
        java.util.ArrayList<course.Course> courseList61 = maintainCourses56.courses;
        java.util.ArrayList<course.Course> courseList62 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses63 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses64 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList65 = maintainCourses64.courses;
        java.util.ArrayList<course.Course> courseList66 = maintainCourses64.courses;
        maintainCourses63.courses = courseList66;
        java.lang.String str68 = maintainCourses63.path;
        java.util.ArrayList<course.Course> courseList69 = maintainCourses63.courses;
        maintainCourses56.courses = courseList69;
        java.lang.String str71 = maintainCourses56.path;
        java.util.ArrayList<course.Course> courseList72 = maintainCourses56.courses;
        maintaining.MaintainCourses maintainCourses73 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses74 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList75 = maintainCourses74.courses;
        java.util.ArrayList<course.Course> courseList76 = maintainCourses74.courses;
        maintainCourses73.courses = courseList76;
        java.lang.String str78 = maintainCourses73.path;
        java.util.ArrayList<course.Course> courseList79 = maintainCourses73.courses;
        maintainCourses56.courses = courseList79;
        maintainCourses0.courses = courseList79;
        java.util.ArrayList<course.Course> courseList82 = maintainCourses0.courses;
        maintainCourses0.path = "";
        java.util.ArrayList<course.Course> courseList85 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList85);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test253");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList1 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList2 = maintainCourses0.courses;
        java.lang.String str3 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses4 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList5 = maintainCourses4.courses;
        java.util.ArrayList<course.Course> courseList6 = maintainCourses4.courses;
        maintainCourses0.courses = courseList6;
        java.lang.String str8 = maintainCourses0.path;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test254");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        course.Course[] courseArray1 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList2 = new java.util.ArrayList<course.Course>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList2, courseArray1);
        maintainCourses0.courses = courseList2;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        maintainCourses0.path = "";
        maintainCourses0.path = "";
        maintainCourses0.path = "hi!";
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        java.util.ArrayList<course.Course> courseList13 = maintainCourses0.courses;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList13);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test255");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.util.ArrayList<course.Course> courseList5 = maintainCourses0.courses;
        course.Course[] courseArray6 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList7 = new java.util.ArrayList<course.Course>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList7, courseArray6);
        maintainCourses0.courses = courseList7;
        java.lang.String str10 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList11 = maintainCourses0.courses;
        maintainCourses0.path = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList11);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "MaintainCoursesTest.test256");
        maintaining.MaintainCourses maintainCourses0 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses1 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList2 = maintainCourses1.courses;
        java.util.ArrayList<course.Course> courseList3 = maintainCourses1.courses;
        maintainCourses0.courses = courseList3;
        java.lang.String str5 = maintainCourses0.path;
        maintaining.MaintainCourses maintainCourses6 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList7 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList8 = maintainCourses6.courses;
        java.util.ArrayList<course.Course> courseList9 = maintainCourses6.courses;
        maintainCourses0.courses = courseList9;
        java.lang.String str11 = maintainCourses0.path;
        java.util.ArrayList<course.Course> courseList12 = maintainCourses0.courses;
        maintaining.MaintainCourses maintainCourses13 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList14 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList15 = maintainCourses13.courses;
        java.util.ArrayList<course.Course> courseList16 = maintainCourses13.courses;
        java.lang.String str17 = maintainCourses13.path;
        maintaining.MaintainCourses maintainCourses18 = new maintaining.MaintainCourses();
        course.Course[] courseArray19 = new course.Course[] {};
        java.util.ArrayList<course.Course> courseList20 = new java.util.ArrayList<course.Course>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<course.Course>) courseList20, courseArray19);
        maintainCourses18.courses = courseList20;
        maintainCourses13.courses = courseList20;
        maintainCourses13.path = "";
        maintainCourses13.path = "hi!";
        maintaining.MaintainCourses maintainCourses28 = new maintaining.MaintainCourses();
        maintaining.MaintainCourses maintainCourses29 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList30 = maintainCourses29.courses;
        java.util.ArrayList<course.Course> courseList31 = maintainCourses29.courses;
        maintainCourses28.courses = courseList31;
        java.lang.String str33 = maintainCourses28.path;
        maintaining.MaintainCourses maintainCourses34 = new maintaining.MaintainCourses();
        java.util.ArrayList<course.Course> courseList35 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList36 = maintainCourses34.courses;
        java.util.ArrayList<course.Course> courseList37 = maintainCourses34.courses;
        maintainCourses28.courses = courseList37;
        maintainCourses13.courses = courseList37;
        maintainCourses0.courses = courseList37;
        java.lang.Class<?> wildcardClass41 = courseList37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(courseList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }
}

